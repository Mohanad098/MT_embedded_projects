
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00003aca  00003b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000e6  008000e6  00003be4  2**0
                  ALLOC
  3 .stab         000030f0  00000000  00000000  00003be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001322  00000000  00000000  00006cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000082a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000adda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ed       	ldi	r26, 0xD2	; 210
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ed       	ldi	r24, 0xD2	; 210
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

void DeInit_pass(uint8 *pass);
void LCD_Timer(void);
uint8 Try_again(void);

int main(void){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c7 56       	subi	r28, 0x67	; 103
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[Array_size],re_pass[Array_size],pass_check[Array_size];
	uint8 step_1,count=0,equality=2,open,equality_open,change_pass,equality_change,step_3=0,step_4=0;
     b60:	fe 01       	movw	r30, r28
     b62:	ef 5b       	subi	r30, 0xBF	; 191
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	fe 01       	movw	r30, r28
     b6c:	e0 5c       	subi	r30, 0xC0	; 192
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	80 83       	st	Z, r24
     b72:	1b ae       	std	Y+59, r1	; 0x3b
     b74:	1a ae       	std	Y+58, r1	; 0x3a
	UART_ConfigType UART_Config ={Eight_bit,Disabled,One_bit,9600};
     b76:	ce 01       	movw	r24, r28
     b78:	8e 5a       	subi	r24, 0xAE	; 174
     b7a:	9f 4f       	sbci	r25, 0xFF	; 255
     b7c:	a0 96       	adiw	r28, 0x20	; 32
     b7e:	9f af       	std	Y+63, r25	; 0x3f
     b80:	8e af       	std	Y+62, r24	; 0x3e
     b82:	a0 97       	sbiw	r28, 0x20	; 32
     b84:	81 ee       	ldi	r24, 0xE1	; 225
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a2 96       	adiw	r28, 0x22	; 34
     b8a:	9f af       	std	Y+63, r25	; 0x3f
     b8c:	8e af       	std	Y+62, r24	; 0x3e
     b8e:	a2 97       	sbiw	r28, 0x22	; 34
     b90:	95 e0       	ldi	r25, 0x05	; 5
     b92:	a3 96       	adiw	r28, 0x23	; 35
     b94:	9f af       	std	Y+63, r25	; 0x3f
     b96:	a3 97       	sbiw	r28, 0x23	; 35
     b98:	a2 96       	adiw	r28, 0x22	; 34
     b9a:	ee ad       	ldd	r30, Y+62	; 0x3e
     b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
     b9e:	a2 97       	sbiw	r28, 0x22	; 34
     ba0:	00 80       	ld	r0, Z
     ba2:	a2 96       	adiw	r28, 0x22	; 34
     ba4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ba6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ba8:	a2 97       	sbiw	r28, 0x22	; 34
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	a2 96       	adiw	r28, 0x22	; 34
     bae:	9f af       	std	Y+63, r25	; 0x3f
     bb0:	8e af       	std	Y+62, r24	; 0x3e
     bb2:	a2 97       	sbiw	r28, 0x22	; 34
     bb4:	a0 96       	adiw	r28, 0x20	; 32
     bb6:	ee ad       	ldd	r30, Y+62	; 0x3e
     bb8:	ff ad       	ldd	r31, Y+63	; 0x3f
     bba:	a0 97       	sbiw	r28, 0x20	; 32
     bbc:	00 82       	st	Z, r0
     bbe:	a0 96       	adiw	r28, 0x20	; 32
     bc0:	8e ad       	ldd	r24, Y+62	; 0x3e
     bc2:	9f ad       	ldd	r25, Y+63	; 0x3f
     bc4:	a0 97       	sbiw	r28, 0x20	; 32
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	a0 96       	adiw	r28, 0x20	; 32
     bca:	9f af       	std	Y+63, r25	; 0x3f
     bcc:	8e af       	std	Y+62, r24	; 0x3e
     bce:	a0 97       	sbiw	r28, 0x20	; 32
     bd0:	a3 96       	adiw	r28, 0x23	; 35
     bd2:	9f ad       	ldd	r25, Y+63	; 0x3f
     bd4:	a3 97       	sbiw	r28, 0x23	; 35
     bd6:	91 50       	subi	r25, 0x01	; 1
     bd8:	a3 96       	adiw	r28, 0x23	; 35
     bda:	9f af       	std	Y+63, r25	; 0x3f
     bdc:	a3 97       	sbiw	r28, 0x23	; 35
     bde:	a3 96       	adiw	r28, 0x23	; 35
     be0:	ef ad       	ldd	r30, Y+63	; 0x3f
     be2:	a3 97       	sbiw	r28, 0x23	; 35
     be4:	ee 23       	and	r30, r30
     be6:	c1 f6       	brne	.-80     	; 0xb98 <main+0x52>
	Ptr_UART_Config=&UART_Config;
     be8:	ce 01       	movw	r24, r28
     bea:	8e 5a       	subi	r24, 0xAE	; 174
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	90 93 e7 00 	sts	0x00E7, r25
     bf2:	80 93 e6 00 	sts	0x00E6, r24
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     bf6:	af e5       	ldi	r26, 0x5F	; 95
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e5       	ldi	r30, 0x5F	; 95
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24
	UART_init(Ptr_UART_Config);
     c04:	80 91 e6 00 	lds	r24, 0x00E6
     c08:	90 91 e7 00 	lds	r25, 0x00E7
     c0c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_init>
	Timer1_ConfigType Timer1_Config={0,1,Pre_1024,CTC_OCR1A,Normal};
     c10:	ce 01       	movw	r24, r28
     c12:	89 5a       	subi	r24, 0xA9	; 169
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	a5 96       	adiw	r28, 0x25	; 37
     c18:	9f af       	std	Y+63, r25	; 0x3f
     c1a:	8e af       	std	Y+62, r24	; 0x3e
     c1c:	a5 97       	sbiw	r28, 0x25	; 37
     c1e:	8a ed       	ldi	r24, 0xDA	; 218
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	a7 96       	adiw	r28, 0x27	; 39
     c24:	9f af       	std	Y+63, r25	; 0x3f
     c26:	8e af       	std	Y+62, r24	; 0x3e
     c28:	a7 97       	sbiw	r28, 0x27	; 39
     c2a:	97 e0       	ldi	r25, 0x07	; 7
     c2c:	a8 96       	adiw	r28, 0x28	; 40
     c2e:	9f af       	std	Y+63, r25	; 0x3f
     c30:	a8 97       	sbiw	r28, 0x28	; 40
     c32:	a7 96       	adiw	r28, 0x27	; 39
     c34:	ee ad       	ldd	r30, Y+62	; 0x3e
     c36:	ff ad       	ldd	r31, Y+63	; 0x3f
     c38:	a7 97       	sbiw	r28, 0x27	; 39
     c3a:	00 80       	ld	r0, Z
     c3c:	a7 96       	adiw	r28, 0x27	; 39
     c3e:	8e ad       	ldd	r24, Y+62	; 0x3e
     c40:	9f ad       	ldd	r25, Y+63	; 0x3f
     c42:	a7 97       	sbiw	r28, 0x27	; 39
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	a7 96       	adiw	r28, 0x27	; 39
     c48:	9f af       	std	Y+63, r25	; 0x3f
     c4a:	8e af       	std	Y+62, r24	; 0x3e
     c4c:	a7 97       	sbiw	r28, 0x27	; 39
     c4e:	a5 96       	adiw	r28, 0x25	; 37
     c50:	ee ad       	ldd	r30, Y+62	; 0x3e
     c52:	ff ad       	ldd	r31, Y+63	; 0x3f
     c54:	a5 97       	sbiw	r28, 0x25	; 37
     c56:	00 82       	st	Z, r0
     c58:	a5 96       	adiw	r28, 0x25	; 37
     c5a:	8e ad       	ldd	r24, Y+62	; 0x3e
     c5c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c5e:	a5 97       	sbiw	r28, 0x25	; 37
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	a5 96       	adiw	r28, 0x25	; 37
     c64:	9f af       	std	Y+63, r25	; 0x3f
     c66:	8e af       	std	Y+62, r24	; 0x3e
     c68:	a5 97       	sbiw	r28, 0x25	; 37
     c6a:	a8 96       	adiw	r28, 0x28	; 40
     c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c6e:	a8 97       	sbiw	r28, 0x28	; 40
     c70:	91 50       	subi	r25, 0x01	; 1
     c72:	a8 96       	adiw	r28, 0x28	; 40
     c74:	9f af       	std	Y+63, r25	; 0x3f
     c76:	a8 97       	sbiw	r28, 0x28	; 40
     c78:	a8 96       	adiw	r28, 0x28	; 40
     c7a:	ef ad       	ldd	r30, Y+63	; 0x3f
     c7c:	a8 97       	sbiw	r28, 0x28	; 40
     c7e:	ee 23       	and	r30, r30
     c80:	c1 f6       	brne	.-80     	; 0xc32 <main+0xec>
	Ptr_Timer1_Config=&Timer1_Config;
     c82:	ce 01       	movw	r24, r28
     c84:	89 5a       	subi	r24, 0xA9	; 169
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	90 93 e9 00 	sts	0x00E9, r25
     c8c:	80 93 e8 00 	sts	0x00E8, r24
	Timer1_setCallBack(LCD_Timer);
     c90:	88 e5       	ldi	r24, 0x58	; 88
     c92:	9a e0       	ldi	r25, 0x0A	; 10
     c94:	0e 94 48 1b 	call	0x3690	; 0x3690 <Timer1_setCallBack>

	LCD_init();
     c98:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_init>

	while(1)
	{
		LCD_clearScreen();
     c9c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Plz enter pass:");
     ca0:	20 e6       	ldi	r18, 0x60	; 96
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	a9 01       	movw	r20, r18
     caa:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
		for (step_1=0;step_1<Array_size;step_1++){
     cae:	fe 01       	movw	r30, r28
     cb0:	ee 5b       	subi	r30, 0xBE	; 190
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	10 82       	st	Z, r1
     cb6:	a5 c0       	rjmp	.+330    	; 0xe02 <main+0x2bc>
			/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
			pass[step_1] = KEYPAD_getPressedKey();
     cb8:	fe 01       	movw	r30, r28
     cba:	ee 5b       	subi	r30, 0xBE	; 190
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	08 2f       	mov	r16, r24
     cc2:	10 e0       	ldi	r17, 0x00	; 0
     cc4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
     cc8:	28 2f       	mov	r18, r24
     cca:	ce 01       	movw	r24, r28
     ccc:	8d 5b       	subi	r24, 0xBD	; 189
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	fc 01       	movw	r30, r24
     cd2:	e0 0f       	add	r30, r16
     cd4:	f1 1f       	adc	r31, r17
     cd6:	20 83       	st	Z, r18
			LCD_moveCursor(1, step_1);
     cd8:	fe 01       	movw	r30, r28
     cda:	ee 5b       	subi	r30, 0xBE	; 190
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	60 81       	ld	r22, Z
     ce2:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_moveCursor>
			LCD_displayString("*");
     ce6:	80 e7       	ldi	r24, 0x70	; 112
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_displayString>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	aa ef       	ldi	r26, 0xFA	; 250
     cf4:	b3 e4       	ldi	r27, 0x43	; 67
     cf6:	8d ab       	std	Y+53, r24	; 0x35
     cf8:	9e ab       	std	Y+54, r25	; 0x36
     cfa:	af ab       	std	Y+55, r26	; 0x37
     cfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfe:	6d a9       	ldd	r22, Y+53	; 0x35
     d00:	7e a9       	ldd	r23, Y+54	; 0x36
     d02:	8f a9       	ldd	r24, Y+55	; 0x37
     d04:	98 ad       	ldd	r25, Y+56	; 0x38
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a e7       	ldi	r20, 0x7A	; 122
     d0c:	53 e4       	ldi	r21, 0x43	; 67
     d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	89 ab       	std	Y+49, r24	; 0x31
     d18:	9a ab       	std	Y+50, r25	; 0x32
     d1a:	ab ab       	std	Y+51, r26	; 0x33
     d1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d1e:	69 a9       	ldd	r22, Y+49	; 0x31
     d20:	7a a9       	ldd	r23, Y+50	; 0x32
     d22:	8b a9       	ldd	r24, Y+51	; 0x33
     d24:	9c a9       	ldd	r25, Y+52	; 0x34
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	2c f4       	brge	.+10     	; 0xd40 <main+0x1fa>
		__ticks = 1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	98 ab       	std	Y+48, r25	; 0x30
     d3c:	8f a7       	std	Y+47, r24	; 0x2f
     d3e:	3f c0       	rjmp	.+126    	; 0xdbe <main+0x278>
	else if (__tmp > 65535)
     d40:	69 a9       	ldd	r22, Y+49	; 0x31
     d42:	7a a9       	ldd	r23, Y+50	; 0x32
     d44:	8b a9       	ldd	r24, Y+51	; 0x33
     d46:	9c a9       	ldd	r25, Y+52	; 0x34
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	3f ef       	ldi	r19, 0xFF	; 255
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	4c f5       	brge	.+82     	; 0xdaa <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d58:	6d a9       	ldd	r22, Y+53	; 0x35
     d5a:	7e a9       	ldd	r23, Y+54	; 0x36
     d5c:	8f a9       	ldd	r24, Y+55	; 0x37
     d5e:	98 ad       	ldd	r25, Y+56	; 0x38
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e2       	ldi	r20, 0x20	; 32
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	98 ab       	std	Y+48, r25	; 0x30
     d7e:	8f a7       	std	Y+47, r24	; 0x2f
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <main+0x25a>
     d82:	89 e1       	ldi	r24, 0x19	; 25
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9e a7       	std	Y+46, r25	; 0x2e
     d88:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8a:	8d a5       	ldd	r24, Y+45	; 0x2d
     d8c:	9e a5       	ldd	r25, Y+46	; 0x2e
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <main+0x248>
     d92:	9e a7       	std	Y+46, r25	; 0x2e
     d94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d96:	8f a5       	ldd	r24, Y+47	; 0x2f
     d98:	98 a9       	ldd	r25, Y+48	; 0x30
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	98 ab       	std	Y+48, r25	; 0x30
     d9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da0:	8f a5       	ldd	r24, Y+47	; 0x2f
     da2:	98 a9       	ldd	r25, Y+48	; 0x30
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	69 f7       	brne	.-38     	; 0xd82 <main+0x23c>
     da8:	14 c0       	rjmp	.+40     	; 0xdd2 <main+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     daa:	69 a9       	ldd	r22, Y+49	; 0x31
     dac:	7a a9       	ldd	r23, Y+50	; 0x32
     dae:	8b a9       	ldd	r24, Y+51	; 0x33
     db0:	9c a9       	ldd	r25, Y+52	; 0x34
     db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	98 ab       	std	Y+48, r25	; 0x30
     dbc:	8f a7       	std	Y+47, r24	; 0x2f
     dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc0:	98 a9       	ldd	r25, Y+48	; 0x30
     dc2:	9c a7       	std	Y+44, r25	; 0x2c
     dc4:	8b a7       	std	Y+43, r24	; 0x2b
     dc6:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc8:	9c a5       	ldd	r25, Y+44	; 0x2c
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <main+0x284>
     dce:	9c a7       	std	Y+44, r25	; 0x2c
     dd0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			UART_sendByte(pass[step_1]);
     dd2:	fe 01       	movw	r30, r28
     dd4:	ee 5b       	subi	r30, 0xBE	; 190
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	80 81       	ld	r24, Z
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	ce 01       	movw	r24, r28
     de0:	8d 5b       	subi	r24, 0xBD	; 189
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	fc 01       	movw	r30, r24
     de6:	e2 0f       	add	r30, r18
     de8:	f3 1f       	adc	r31, r19
     dea:	80 81       	ld	r24, Z
     dec:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>

	while(1)
	{
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Plz enter pass:");
		for (step_1=0;step_1<Array_size;step_1++){
     df0:	de 01       	movw	r26, r28
     df2:	ae 5b       	subi	r26, 0xBE	; 190
     df4:	bf 4f       	sbci	r27, 0xFF	; 255
     df6:	fe 01       	movw	r30, r28
     df8:	ee 5b       	subi	r30, 0xBE	; 190
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	8c 93       	st	X, r24
     e02:	fe 01       	movw	r30, r28
     e04:	ee 5b       	subi	r30, 0xBE	; 190
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	80 81       	ld	r24, Z
     e0a:	85 30       	cpi	r24, 0x05	; 5
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <main+0x2ca>
     e0e:	54 cf       	rjmp	.-344    	; 0xcb8 <main+0x172>
			LCD_moveCursor(1, step_1);
			LCD_displayString("*");
			_delay_ms(500);
			UART_sendByte(pass[step_1]);
		}
		while(KEYPAD_getPressedKey()!='='){}
     e10:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
     e14:	8d 33       	cpi	r24, 0x3D	; 61
     e16:	e1 f7       	brne	.-8      	; 0xe10 <main+0x2ca>
		if (step_1==5){
     e18:	fe 01       	movw	r30, r28
     e1a:	ee 5b       	subi	r30, 0xBE	; 190
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 81       	ld	r24, Z
     e20:	85 30       	cpi	r24, 0x05	; 5
     e22:	09 f0       	breq	.+2      	; 0xe26 <main+0x2e0>
     e24:	c3 c0       	rjmp	.+390    	; 0xfac <main+0x466>
			LCD_displayStringRowColumn(0,0,"Plz re-enter the");
     e26:	22 e7       	ldi	r18, 0x72	; 114
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	a9 01       	movw	r20, r18
     e30:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"same pass:");
     e34:	23 e8       	ldi	r18, 0x83	; 131
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	a9 01       	movw	r20, r18
     e3e:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>

			for (uint8 y=10;y<(10+Array_size);y++){
     e42:	8a e0       	ldi	r24, 0x0A	; 10
     e44:	89 af       	std	Y+57, r24	; 0x39
     e46:	ae c0       	rjmp	.+348    	; 0xfa4 <main+0x45e>
				/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
				re_pass[count] = KEYPAD_getPressedKey();
     e48:	fe 01       	movw	r30, r28
     e4a:	ef 5b       	subi	r30, 0xBF	; 191
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	80 81       	ld	r24, Z
     e50:	08 2f       	mov	r16, r24
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
     e58:	28 2f       	mov	r18, r24
     e5a:	ce 01       	movw	r24, r28
     e5c:	88 5b       	subi	r24, 0xB8	; 184
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	fc 01       	movw	r30, r24
     e62:	e0 0f       	add	r30, r16
     e64:	f1 1f       	adc	r31, r17
     e66:	20 83       	st	Z, r18
				LCD_moveCursor(1, y);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	69 ad       	ldd	r22, Y+57	; 0x39
     e6c:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_moveCursor>
				LCD_displayString("*");
     e70:	80 e7       	ldi	r24, 0x70	; 112
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_displayString>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	aa ef       	ldi	r26, 0xFA	; 250
     e7e:	b3 e4       	ldi	r27, 0x43	; 67
     e80:	8f a3       	std	Y+39, r24	; 0x27
     e82:	98 a7       	std	Y+40, r25	; 0x28
     e84:	a9 a7       	std	Y+41, r26	; 0x29
     e86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e88:	6f a1       	ldd	r22, Y+39	; 0x27
     e8a:	78 a5       	ldd	r23, Y+40	; 0x28
     e8c:	89 a5       	ldd	r24, Y+41	; 0x29
     e8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	4a e7       	ldi	r20, 0x7A	; 122
     e96:	53 e4       	ldi	r21, 0x43	; 67
     e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	8b a3       	std	Y+35, r24	; 0x23
     ea2:	9c a3       	std	Y+36, r25	; 0x24
     ea4:	ad a3       	std	Y+37, r26	; 0x25
     ea6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ea8:	6b a1       	ldd	r22, Y+35	; 0x23
     eaa:	7c a1       	ldd	r23, Y+36	; 0x24
     eac:	8d a1       	ldd	r24, Y+37	; 0x25
     eae:	9e a1       	ldd	r25, Y+38	; 0x26
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	2c f4       	brge	.+10     	; 0xeca <main+0x384>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	9a a3       	std	Y+34, r25	; 0x22
     ec6:	89 a3       	std	Y+33, r24	; 0x21
     ec8:	3f c0       	rjmp	.+126    	; 0xf48 <main+0x402>
	else if (__tmp > 65535)
     eca:	6b a1       	ldd	r22, Y+35	; 0x23
     ecc:	7c a1       	ldd	r23, Y+36	; 0x24
     ece:	8d a1       	ldd	r24, Y+37	; 0x25
     ed0:	9e a1       	ldd	r25, Y+38	; 0x26
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	4f e7       	ldi	r20, 0x7F	; 127
     ed8:	57 e4       	ldi	r21, 0x47	; 71
     eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ede:	18 16       	cp	r1, r24
     ee0:	4c f5       	brge	.+82     	; 0xf34 <main+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee2:	6f a1       	ldd	r22, Y+39	; 0x27
     ee4:	78 a5       	ldd	r23, Y+40	; 0x28
     ee6:	89 a5       	ldd	r24, Y+41	; 0x29
     ee8:	9a a5       	ldd	r25, Y+42	; 0x2a
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e2       	ldi	r20, 0x20	; 32
     ef0:	51 e4       	ldi	r21, 0x41	; 65
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	9a a3       	std	Y+34, r25	; 0x22
     f08:	89 a3       	std	Y+33, r24	; 0x21
     f0a:	0f c0       	rjmp	.+30     	; 0xf2a <main+0x3e4>
     f0c:	89 e1       	ldi	r24, 0x19	; 25
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	98 a3       	std	Y+32, r25	; 0x20
     f12:	8f 8f       	std	Y+31, r24	; 0x1f
     f14:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f16:	98 a1       	ldd	r25, Y+32	; 0x20
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <main+0x3d2>
     f1c:	98 a3       	std	Y+32, r25	; 0x20
     f1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f20:	89 a1       	ldd	r24, Y+33	; 0x21
     f22:	9a a1       	ldd	r25, Y+34	; 0x22
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	9a a3       	std	Y+34, r25	; 0x22
     f28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2a:	89 a1       	ldd	r24, Y+33	; 0x21
     f2c:	9a a1       	ldd	r25, Y+34	; 0x22
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	69 f7       	brne	.-38     	; 0xf0c <main+0x3c6>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <main+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f34:	6b a1       	ldd	r22, Y+35	; 0x23
     f36:	7c a1       	ldd	r23, Y+36	; 0x24
     f38:	8d a1       	ldd	r24, Y+37	; 0x25
     f3a:	9e a1       	ldd	r25, Y+38	; 0x26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9a a3       	std	Y+34, r25	; 0x22
     f46:	89 a3       	std	Y+33, r24	; 0x21
     f48:	89 a1       	ldd	r24, Y+33	; 0x21
     f4a:	9a a1       	ldd	r25, Y+34	; 0x22
     f4c:	9e 8f       	std	Y+30, r25	; 0x1e
     f4e:	8d 8f       	std	Y+29, r24	; 0x1d
     f50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f52:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <main+0x40e>
     f58:	9e 8f       	std	Y+30, r25	; 0x1e
     f5a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				UART_sendByte(re_pass[count]);
     f5c:	fe 01       	movw	r30, r28
     f5e:	ef 5b       	subi	r30, 0xBF	; 191
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	80 81       	ld	r24, Z
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	ce 01       	movw	r24, r28
     f6a:	88 5b       	subi	r24, 0xB8	; 184
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 0f       	add	r30, r18
     f72:	f3 1f       	adc	r31, r19
     f74:	80 81       	ld	r24, Z
     f76:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
				count++;
     f7a:	de 01       	movw	r26, r28
     f7c:	af 5b       	subi	r26, 0xBF	; 191
     f7e:	bf 4f       	sbci	r27, 0xFF	; 255
     f80:	fe 01       	movw	r30, r28
     f82:	ef 5b       	subi	r30, 0xBF	; 191
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	8c 93       	st	X, r24
				step_1++;
     f8c:	de 01       	movw	r26, r28
     f8e:	ae 5b       	subi	r26, 0xBE	; 190
     f90:	bf 4f       	sbci	r27, 0xFF	; 255
     f92:	fe 01       	movw	r30, r28
     f94:	ee 5b       	subi	r30, 0xBE	; 190
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	8c 93       	st	X, r24
		while(KEYPAD_getPressedKey()!='='){}
		if (step_1==5){
			LCD_displayStringRowColumn(0,0,"Plz re-enter the");
			LCD_displayStringRowColumn(1,0,"same pass:");

			for (uint8 y=10;y<(10+Array_size);y++){
     f9e:	89 ad       	ldd	r24, Y+57	; 0x39
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	89 af       	std	Y+57, r24	; 0x39
     fa4:	89 ad       	ldd	r24, Y+57	; 0x39
     fa6:	8f 30       	cpi	r24, 0x0F	; 15
     fa8:	08 f4       	brcc	.+2      	; 0xfac <main+0x466>
     faa:	4e cf       	rjmp	.-356    	; 0xe48 <main+0x302>
				UART_sendByte(re_pass[count]);
				count++;
				step_1++;
			}
		}
		while(KEYPAD_getPressedKey()!='='){}
     fac:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
     fb0:	8d 33       	cpi	r24, 0x3D	; 61
     fb2:	e1 f7       	brne	.-8      	; 0xfac <main+0x466>
		if (step_1==10){
     fb4:	fe 01       	movw	r30, r28
     fb6:	ee 5b       	subi	r30, 0xBE	; 190
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	80 81       	ld	r24, Z
     fbc:	8a 30       	cpi	r24, 0x0A	; 10
     fbe:	31 f4       	brne	.+12     	; 0xfcc <main+0x486>
			equality=UART_recieveByte();
     fc0:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
     fc4:	fe 01       	movw	r30, r28
     fc6:	e0 5c       	subi	r30, 0xC0	; 192
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 83       	st	Z, r24
		}
		if (equality==0){
     fcc:	fe 01       	movw	r30, r28
     fce:	e0 5c       	subi	r30, 0xC0	; 192
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	09 f0       	breq	.+2      	; 0xfda <main+0x494>
     fd8:	44 c2       	rjmp	.+1160   	; 0x1462 <main+0x91c>
			step_1=0;
     fda:	fe 01       	movw	r30, r28
     fdc:	ee 5b       	subi	r30, 0xBE	; 190
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	10 82       	st	Z, r1
			DeInit_pass(pass);
     fe2:	ce 01       	movw	r24, r28
     fe4:	8d 5b       	subi	r24, 0xBD	; 189
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	0e 94 39 0a 	call	0x1472	; 0x1472 <DeInit_pass>
			DeInit_pass(re_pass);
     fec:	ce 01       	movw	r24, r28
     fee:	88 5b       	subi	r24, 0xB8	; 184
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	0e 94 39 0a 	call	0x1472	; 0x1472 <DeInit_pass>
     ff6:	52 ce       	rjmp	.-860    	; 0xc9c <main+0x156>
		}
		else{/*****************Steps 2 3 4 5*******************/
			while (step_1==10){
				if (step_3==0&&step_4==0){
     ff8:	8b ad       	ldd	r24, Y+59	; 0x3b
     ffa:	88 23       	and	r24, r24
     ffc:	99 f4       	brne	.+38     	; 0x1024 <main+0x4de>
     ffe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1000:	88 23       	and	r24, r24
    1002:	81 f4       	brne	.+32     	; 0x1024 <main+0x4de>
					LCD_clearScreen();
    1004:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"+: Open door");
    1008:	2e e8       	ldi	r18, 0x8E	; 142
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	a9 01       	movw	r20, r18
    1012:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,0,"-: Change pass");
    1016:	2b e9       	ldi	r18, 0x9B	; 155
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	a9 01       	movw	r20, r18
    1020:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
				}
				if (KEYPAD_getPressedKey()=='+'){/*************Step3***********/
    1024:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
    1028:	8b 32       	cpi	r24, 0x2B	; 43
    102a:	09 f0       	breq	.+2      	; 0x102e <main+0x4e8>
    102c:	1e c1       	rjmp	.+572    	; 0x126a <main+0x724>
					if (step_3==0){
    102e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1030:	88 23       	and	r24, r24
    1032:	09 f0       	breq	.+2      	; 0x1036 <main+0x4f0>
    1034:	15 c1       	rjmp	.+554    	; 0x1260 <main+0x71a>
						LCD_clearScreen();
    1036:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Plz enter pass:");
    103a:	20 e6       	ldi	r18, 0x60	; 96
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	a9 01       	movw	r20, r18
    1044:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
						DeInit_pass(pass_check);
    1048:	ce 01       	movw	r24, r28
    104a:	83 5b       	subi	r24, 0xB3	; 179
    104c:	9f 4f       	sbci	r25, 0xFF	; 255
    104e:	0e 94 39 0a 	call	0x1472	; 0x1472 <DeInit_pass>
						while(UART_recieveByte()!=CONTROL_READY);
    1052:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    1056:	8b 30       	cpi	r24, 0x0B	; 11
    1058:	e1 f7       	brne	.-8      	; 0x1052 <main+0x50c>
						UART_sendByte(OPEN_DOOR);
    105a:	84 e1       	ldi	r24, 0x14	; 20
    105c:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
						for (open=0;open<Array_size;open++){
    1060:	1f ae       	std	Y+63, r1	; 0x3f
    1062:	96 c0       	rjmp	.+300    	; 0x1190 <main+0x64a>
							pass_check[open] = KEYPAD_getPressedKey();
    1064:	8f ad       	ldd	r24, Y+63	; 0x3f
    1066:	08 2f       	mov	r16, r24
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
    106e:	28 2f       	mov	r18, r24
    1070:	ce 01       	movw	r24, r28
    1072:	83 5b       	subi	r24, 0xB3	; 179
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	fc 01       	movw	r30, r24
    1078:	e0 0f       	add	r30, r16
    107a:	f1 1f       	adc	r31, r17
    107c:	20 83       	st	Z, r18
							LCD_moveCursor(1, open);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	6f ad       	ldd	r22, Y+63	; 0x3f
    1082:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_moveCursor>
							LCD_displayString("*");
    1086:	80 e7       	ldi	r24, 0x70	; 112
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_displayString>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	aa ef       	ldi	r26, 0xFA	; 250
    1094:	b3 e4       	ldi	r27, 0x43	; 67
    1096:	89 8f       	std	Y+25, r24	; 0x19
    1098:	9a 8f       	std	Y+26, r25	; 0x1a
    109a:	ab 8f       	std	Y+27, r26	; 0x1b
    109c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109e:	69 8d       	ldd	r22, Y+25	; 0x19
    10a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	4a e7       	ldi	r20, 0x7A	; 122
    10ac:	53 e4       	ldi	r21, 0x43	; 67
    10ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	8d 8b       	std	Y+21, r24	; 0x15
    10b8:	9e 8b       	std	Y+22, r25	; 0x16
    10ba:	af 8b       	std	Y+23, r26	; 0x17
    10bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10be:	6d 89       	ldd	r22, Y+21	; 0x15
    10c0:	7e 89       	ldd	r23, Y+22	; 0x16
    10c2:	8f 89       	ldd	r24, Y+23	; 0x17
    10c4:	98 8d       	ldd	r25, Y+24	; 0x18
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e8       	ldi	r20, 0x80	; 128
    10cc:	5f e3       	ldi	r21, 0x3F	; 63
    10ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d2:	88 23       	and	r24, r24
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <main+0x59a>
		__ticks = 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9c 8b       	std	Y+20, r25	; 0x14
    10dc:	8b 8b       	std	Y+19, r24	; 0x13
    10de:	3f c0       	rjmp	.+126    	; 0x115e <main+0x618>
	else if (__tmp > 65535)
    10e0:	6d 89       	ldd	r22, Y+21	; 0x15
    10e2:	7e 89       	ldd	r23, Y+22	; 0x16
    10e4:	8f 89       	ldd	r24, Y+23	; 0x17
    10e6:	98 8d       	ldd	r25, Y+24	; 0x18
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	3f ef       	ldi	r19, 0xFF	; 255
    10ec:	4f e7       	ldi	r20, 0x7F	; 127
    10ee:	57 e4       	ldi	r21, 0x47	; 71
    10f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f4:	18 16       	cp	r1, r24
    10f6:	4c f5       	brge	.+82     	; 0x114a <main+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f8:	69 8d       	ldd	r22, Y+25	; 0x19
    10fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e2       	ldi	r20, 0x20	; 32
    1106:	51 e4       	ldi	r21, 0x41	; 65
    1108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	9c 8b       	std	Y+20, r25	; 0x14
    111e:	8b 8b       	std	Y+19, r24	; 0x13
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <main+0x5fa>
    1122:	89 e1       	ldi	r24, 0x19	; 25
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9a 8b       	std	Y+18, r25	; 0x12
    1128:	89 8b       	std	Y+17, r24	; 0x11
    112a:	89 89       	ldd	r24, Y+17	; 0x11
    112c:	9a 89       	ldd	r25, Y+18	; 0x12
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <main+0x5e8>
    1132:	9a 8b       	std	Y+18, r25	; 0x12
    1134:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1136:	8b 89       	ldd	r24, Y+19	; 0x13
    1138:	9c 89       	ldd	r25, Y+20	; 0x14
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	9c 8b       	std	Y+20, r25	; 0x14
    113e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	8b 89       	ldd	r24, Y+19	; 0x13
    1142:	9c 89       	ldd	r25, Y+20	; 0x14
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	69 f7       	brne	.-38     	; 0x1122 <main+0x5dc>
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <main+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114a:	6d 89       	ldd	r22, Y+21	; 0x15
    114c:	7e 89       	ldd	r23, Y+22	; 0x16
    114e:	8f 89       	ldd	r24, Y+23	; 0x17
    1150:	98 8d       	ldd	r25, Y+24	; 0x18
    1152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	9c 8b       	std	Y+20, r25	; 0x14
    115c:	8b 8b       	std	Y+19, r24	; 0x13
    115e:	8b 89       	ldd	r24, Y+19	; 0x13
    1160:	9c 89       	ldd	r25, Y+20	; 0x14
    1162:	98 8b       	std	Y+16, r25	; 0x10
    1164:	8f 87       	std	Y+15, r24	; 0x0f
    1166:	8f 85       	ldd	r24, Y+15	; 0x0f
    1168:	98 89       	ldd	r25, Y+16	; 0x10
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <main+0x624>
    116e:	98 8b       	std	Y+16, r25	; 0x10
    1170:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(500);
							UART_sendByte(pass_check[open]);
    1172:	8f ad       	ldd	r24, Y+63	; 0x3f
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	ce 01       	movw	r24, r28
    117a:	83 5b       	subi	r24, 0xB3	; 179
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	fc 01       	movw	r30, r24
    1180:	e2 0f       	add	r30, r18
    1182:	f3 1f       	adc	r31, r19
    1184:	80 81       	ld	r24, Z
    1186:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
						LCD_clearScreen();
						LCD_displayStringRowColumn(0,0,"Plz enter pass:");
						DeInit_pass(pass_check);
						while(UART_recieveByte()!=CONTROL_READY);
						UART_sendByte(OPEN_DOOR);
						for (open=0;open<Array_size;open++){
    118a:	8f ad       	ldd	r24, Y+63	; 0x3f
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	8f af       	std	Y+63, r24	; 0x3f
    1190:	8f ad       	ldd	r24, Y+63	; 0x3f
    1192:	85 30       	cpi	r24, 0x05	; 5
    1194:	08 f4       	brcc	.+2      	; 0x1198 <main+0x652>
    1196:	66 cf       	rjmp	.-308    	; 0x1064 <main+0x51e>
							LCD_moveCursor(1, open);
							LCD_displayString("*");
							_delay_ms(500);
							UART_sendByte(pass_check[open]);
						}
						while(KEYPAD_getPressedKey()!='=');
    1198:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
    119c:	8d 33       	cpi	r24, 0x3D	; 61
    119e:	e1 f7       	brne	.-8      	; 0x1198 <main+0x652>
						if (open==5){
    11a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	39 f4       	brne	.+14     	; 0x11b4 <main+0x66e>
							while (UART_recieveByte()!=CONTROL_READY){};
    11a6:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    11aa:	8b 30       	cpi	r24, 0x0B	; 11
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <main+0x660>
							equality_open=UART_recieveByte();
    11ae:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    11b2:	8e af       	std	Y+62, r24	; 0x3e
						}
						step_3=1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	8b af       	std	Y+59, r24	; 0x3b
    11b8:	53 c0       	rjmp	.+166    	; 0x1260 <main+0x71a>
					}
					while(step_3==1){
						if (equality_open==1){/*passwords are equal*/
    11ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	69 f5       	brne	.+90     	; 0x121a <main+0x6d4>
							UART_sendByte(HMI_READY);
    11c0:	8a e0       	ldi	r24, 0x0A	; 10
    11c2:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
							Timer1_init(Ptr_Timer1_Config);
    11c6:	80 91 e8 00 	lds	r24, 0x00E8
    11ca:	90 91 e9 00 	lds	r25, 0x00E9
    11ce:	0e 94 4b 1a 	call	0x3496	; 0x3496 <Timer1_init>
							tick=0;
    11d2:	10 92 ea 00 	sts	0x00EA, r1
							LCD_clearScreen();
    11d6:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
							LCD_displayStringRowColumn(0,0,"Door is Unlocking");
    11da:	2a ea       	ldi	r18, 0xAA	; 170
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
							while (tick<18){}
    11e8:	80 91 ea 00 	lds	r24, 0x00EA
    11ec:	82 31       	cpi	r24, 0x12	; 18
    11ee:	e0 f3       	brcs	.-8      	; 0x11e8 <main+0x6a2>
							LCD_clearScreen();
    11f0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
							LCD_displayStringRowColumn(0,0,"Door is Locking");
    11f4:	2c eb       	ldi	r18, 0xBC	; 188
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	a9 01       	movw	r20, r18
    11fe:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
							while(tick>=18&&tick<33){}
    1202:	80 91 ea 00 	lds	r24, 0x00EA
    1206:	82 31       	cpi	r24, 0x12	; 18
    1208:	20 f0       	brcs	.+8      	; 0x1212 <main+0x6cc>
    120a:	80 91 ea 00 	lds	r24, 0x00EA
    120e:	81 32       	cpi	r24, 0x21	; 33
    1210:	c0 f3       	brcs	.-16     	; 0x1202 <main+0x6bc>
							Timer1_deInit();
    1212:	0e 94 2c 1b 	call	0x3658	; 0x3658 <Timer1_deInit>
							step_3=0;
    1216:	1b ae       	std	Y+59, r1	; 0x3b
    1218:	23 c0       	rjmp	.+70     	; 0x1260 <main+0x71a>
						}
						else{
							if(Try_again()==1){/*pass was written right in less than 3 times*/
    121a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <Try_again>
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	19 f4       	brne	.+6      	; 0x1228 <main+0x6e2>
								equality_open=1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	8e af       	std	Y+62, r24	; 0x3e
    1226:	1c c0       	rjmp	.+56     	; 0x1260 <main+0x71a>
							}
							else if(Try_again()==0){/*pass written wrong 3 times more*/
    1228:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <Try_again>
    122c:	88 23       	and	r24, r24
    122e:	c1 f4       	brne	.+48     	; 0x1260 <main+0x71a>
								Timer1_init(Ptr_Timer1_Config);
    1230:	80 91 e8 00 	lds	r24, 0x00E8
    1234:	90 91 e9 00 	lds	r25, 0x00E9
    1238:	0e 94 4b 1a 	call	0x3496	; 0x3496 <Timer1_init>
								tick=0;
    123c:	10 92 ea 00 	sts	0x00EA, r1
								LCD_clearScreen();
    1240:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
								LCD_displayStringRowColumn(0,0,"ERROR");
    1244:	2c ec       	ldi	r18, 0xCC	; 204
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
								while(tick<60){}
    1252:	80 91 ea 00 	lds	r24, 0x00EA
    1256:	8c 33       	cpi	r24, 0x3C	; 60
    1258:	e0 f3       	brcs	.-8      	; 0x1252 <main+0x70c>
								Timer1_deInit();
    125a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <Timer1_deInit>
								step_3=0;
    125e:	1b ae       	std	Y+59, r1	; 0x3b
							while (UART_recieveByte()!=CONTROL_READY){};
							equality_open=UART_recieveByte();
						}
						step_3=1;
					}
					while(step_3==1){
    1260:	8b ad       	ldd	r24, Y+59	; 0x3b
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	09 f4       	brne	.+2      	; 0x1268 <main+0x722>
    1266:	a9 cf       	rjmp	.-174    	; 0x11ba <main+0x674>
    1268:	fc c0       	rjmp	.+504    	; 0x1462 <main+0x91c>
								step_3=0;
							}
						}/********End of pass trial step_3*******/
					}
				}/***************End of step_3*****************/
				else if (KEYPAD_getPressedKey()=='-'){/***********STEP_4*********/
    126a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
    126e:	8d 32       	cpi	r24, 0x2D	; 45
    1270:	09 f0       	breq	.+2      	; 0x1274 <main+0x72e>
    1272:	f7 c0       	rjmp	.+494    	; 0x1462 <main+0x91c>
					if (step_4==0){
    1274:	8a ad       	ldd	r24, Y+58	; 0x3a
    1276:	88 23       	and	r24, r24
    1278:	09 f0       	breq	.+2      	; 0x127c <main+0x736>
    127a:	f0 c0       	rjmp	.+480    	; 0x145c <main+0x916>
						LCD_clearScreen();
    127c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Plz enter pass:");
    1280:	20 e6       	ldi	r18, 0x60	; 96
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
						DeInit_pass(pass_check);
    128e:	ce 01       	movw	r24, r28
    1290:	83 5b       	subi	r24, 0xB3	; 179
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	0e 94 39 0a 	call	0x1472	; 0x1472 <DeInit_pass>
						while (UART_recieveByte()!=CONTROL_READY){};
    1298:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    129c:	8b 30       	cpi	r24, 0x0B	; 11
    129e:	e1 f7       	brne	.-8      	; 0x1298 <main+0x752>
						UART_sendByte(CHANGE_PASSWORD);
    12a0:	85 e1       	ldi	r24, 0x15	; 21
    12a2:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
						for (change_pass=0;change_pass<Array_size;change_pass++){
    12a6:	1d ae       	std	Y+61, r1	; 0x3d
    12a8:	96 c0       	rjmp	.+300    	; 0x13d6 <main+0x890>
							pass_check[change_pass] = KEYPAD_getPressedKey();
    12aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ac:	08 2f       	mov	r16, r24
    12ae:	10 e0       	ldi	r17, 0x00	; 0
    12b0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
    12b4:	28 2f       	mov	r18, r24
    12b6:	ce 01       	movw	r24, r28
    12b8:	83 5b       	subi	r24, 0xB3	; 179
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	fc 01       	movw	r30, r24
    12be:	e0 0f       	add	r30, r16
    12c0:	f1 1f       	adc	r31, r17
    12c2:	20 83       	st	Z, r18
							LCD_moveCursor(1, change_pass);
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	6d ad       	ldd	r22, Y+61	; 0x3d
    12c8:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_moveCursor>
							LCD_displayString("*");
    12cc:	80 e7       	ldi	r24, 0x70	; 112
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_displayString>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	aa ef       	ldi	r26, 0xFA	; 250
    12da:	b3 e4       	ldi	r27, 0x43	; 67
    12dc:	8b 87       	std	Y+11, r24	; 0x0b
    12de:	9c 87       	std	Y+12, r25	; 0x0c
    12e0:	ad 87       	std	Y+13, r26	; 0x0d
    12e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	4a e7       	ldi	r20, 0x7A	; 122
    12f2:	53 e4       	ldi	r21, 0x43	; 67
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8f 83       	std	Y+7, r24	; 0x07
    12fe:	98 87       	std	Y+8, r25	; 0x08
    1300:	a9 87       	std	Y+9, r26	; 0x09
    1302:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e8       	ldi	r20, 0x80	; 128
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1318:	88 23       	and	r24, r24
    131a:	2c f4       	brge	.+10     	; 0x1326 <main+0x7e0>
		__ticks = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	3f c0       	rjmp	.+126    	; 0x13a4 <main+0x85e>
	else if (__tmp > 65535)
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	4c f5       	brge	.+82     	; 0x1390 <main+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1340:	7c 85       	ldd	r23, Y+12	; 0x0c
    1342:	8d 85       	ldd	r24, Y+13	; 0x0d
    1344:	9e 85       	ldd	r25, Y+14	; 0x0e
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <main+0x840>
    1368:	89 e1       	ldi	r24, 0x19	; 25
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <main+0x82e>
    1378:	9c 83       	std	Y+4, r25	; 0x04
    137a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	69 f7       	brne	.-38     	; 0x1368 <main+0x822>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <main+0x872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1390:	6f 81       	ldd	r22, Y+7	; 0x07
    1392:	78 85       	ldd	r23, Y+8	; 0x08
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <main+0x86a>
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(500);
							UART_sendByte(pass_check[change_pass]);
    13b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	ce 01       	movw	r24, r28
    13c0:	83 5b       	subi	r24, 0xB3	; 179
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	fc 01       	movw	r30, r24
    13c6:	e2 0f       	add	r30, r18
    13c8:	f3 1f       	adc	r31, r19
    13ca:	80 81       	ld	r24, Z
    13cc:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
						LCD_clearScreen();
						LCD_displayStringRowColumn(0,0,"Plz enter pass:");
						DeInit_pass(pass_check);
						while (UART_recieveByte()!=CONTROL_READY){};
						UART_sendByte(CHANGE_PASSWORD);
						for (change_pass=0;change_pass<Array_size;change_pass++){
    13d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    13d2:	8f 5f       	subi	r24, 0xFF	; 255
    13d4:	8d af       	std	Y+61, r24	; 0x3d
    13d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13d8:	85 30       	cpi	r24, 0x05	; 5
    13da:	08 f4       	brcc	.+2      	; 0x13de <main+0x898>
    13dc:	66 cf       	rjmp	.-308    	; 0x12aa <main+0x764>
							LCD_moveCursor(1, change_pass);
							LCD_displayString("*");
							_delay_ms(500);
							UART_sendByte(pass_check[change_pass]);
						}
						while(KEYPAD_getPressedKey()!='=');
    13de:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
    13e2:	8d 33       	cpi	r24, 0x3D	; 61
    13e4:	e1 f7       	brne	.-8      	; 0x13de <main+0x898>
						if (change_pass==5){
    13e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13e8:	85 30       	cpi	r24, 0x05	; 5
    13ea:	39 f4       	brne	.+14     	; 0x13fa <main+0x8b4>
							while (UART_recieveByte()!=CONTROL_READY){}
    13ec:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    13f0:	8b 30       	cpi	r24, 0x0B	; 11
    13f2:	e1 f7       	brne	.-8      	; 0x13ec <main+0x8a6>
							equality_change=UART_recieveByte();
    13f4:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    13f8:	8c af       	std	Y+60, r24	; 0x3c
						}
						step_4=1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8a af       	std	Y+58, r24	; 0x3a
    13fe:	2e c0       	rjmp	.+92     	; 0x145c <main+0x916>
					}
					while(step_4==1){
						if (equality_change==1){/*passwords are equal*/
    1400:	8c ad       	ldd	r24, Y+60	; 0x3c
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	31 f4       	brne	.+12     	; 0x1412 <main+0x8cc>
							step_1=0;
    1406:	fe 01       	movw	r30, r28
    1408:	ee 5b       	subi	r30, 0xBE	; 190
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	10 82       	st	Z, r1
							step_4=0;
    140e:	1a ae       	std	Y+58, r1	; 0x3a
    1410:	25 c0       	rjmp	.+74     	; 0x145c <main+0x916>
						}
						else{
							if (Try_again()==1){/*pass was written right in less than 3 times*/
    1412:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <Try_again>
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	29 f4       	brne	.+10     	; 0x1424 <main+0x8de>
								step_4=1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	8a af       	std	Y+58, r24	; 0x3a
								equality_change=1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	8c af       	std	Y+60, r24	; 0x3c
    1422:	1c c0       	rjmp	.+56     	; 0x145c <main+0x916>
							}
							else if(Try_again()==0){/*pass written wrong 3 times more*/
    1424:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <Try_again>
    1428:	88 23       	and	r24, r24
    142a:	c1 f4       	brne	.+48     	; 0x145c <main+0x916>
								Timer1_init(Ptr_Timer1_Config);
    142c:	80 91 e8 00 	lds	r24, 0x00E8
    1430:	90 91 e9 00 	lds	r25, 0x00E9
    1434:	0e 94 4b 1a 	call	0x3496	; 0x3496 <Timer1_init>
								tick=0;
    1438:	10 92 ea 00 	sts	0x00EA, r1
								LCD_clearScreen();
    143c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
								LCD_displayStringRowColumn(0,0,"ERROR");
    1440:	2c ec       	ldi	r18, 0xCC	; 204
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	a9 01       	movw	r20, r18
    144a:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
								while(tick<60){}
    144e:	80 91 ea 00 	lds	r24, 0x00EA
    1452:	8c 33       	cpi	r24, 0x3C	; 60
    1454:	e0 f3       	brcs	.-8      	; 0x144e <main+0x908>
								Timer1_deInit();
    1456:	0e 94 2c 1b 	call	0x3658	; 0x3658 <Timer1_deInit>
								step_4=0;
    145a:	1a ae       	std	Y+58, r1	; 0x3a
							while (UART_recieveByte()!=CONTROL_READY){}
							equality_change=UART_recieveByte();
						}
						step_4=1;
					}
					while(step_4==1){
    145c:	8a ad       	ldd	r24, Y+58	; 0x3a
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	79 f2       	breq	.-98     	; 0x1400 <main+0x8ba>
			step_1=0;
			DeInit_pass(pass);
			DeInit_pass(re_pass);
		}
		else{/*****************Steps 2 3 4 5*******************/
			while (step_1==10){
    1462:	fe 01       	movw	r30, r28
    1464:	ee 5b       	subi	r30, 0xBE	; 190
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	8a 30       	cpi	r24, 0x0A	; 10
    146c:	09 f4       	brne	.+2      	; 0x1470 <main+0x92a>
    146e:	c4 cd       	rjmp	.-1144   	; 0xff8 <main+0x4b2>
    1470:	15 cc       	rjmp	.-2006   	; 0xc9c <main+0x156>

00001472 <DeInit_pass>:

	}/*******************End of while(1)*************/

}

void DeInit_pass(uint8 *pass){
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <DeInit_pass+0x6>
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	9b 83       	std	Y+3, r25	; 0x03
    1480:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i=0;i<Array_size;i++){
    1482:	19 82       	std	Y+1, r1	; 0x01
    1484:	0c c0       	rjmp	.+24     	; 0x149e <DeInit_pass+0x2c>
		pass[i]=0;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	9b 81       	ldd	r25, Y+3	; 0x03
    1490:	fc 01       	movw	r30, r24
    1492:	e2 0f       	add	r30, r18
    1494:	f3 1f       	adc	r31, r19
    1496:	10 82       	st	Z, r1
	}/*******************End of while(1)*************/

}

void DeInit_pass(uint8 *pass){
	for (uint8 i=0;i<Array_size;i++){
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	85 30       	cpi	r24, 0x05	; 5
    14a2:	88 f3       	brcs	.-30     	; 0x1486 <DeInit_pass+0x14>
		pass[i]=0;
	}
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <LCD_Timer>:

void LCD_Timer(void){
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
	tick++;
    14b8:	80 91 ea 00 	lds	r24, 0x00EA
    14bc:	8f 5f       	subi	r24, 0xFF	; 255
    14be:	80 93 ea 00 	sts	0x00EA, r24
}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <Try_again>:

uint8 Try_again(void){
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	66 97       	sbiw	r28, 0x16	; 22
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
	uint8 pass_try[Array_size],trials=0;
    14e0:	18 8a       	std	Y+16, r1	; 0x10
	LCD_clearScreen();
    14e2:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz enter pass:");
    14e6:	20 e6       	ldi	r18, 0x60	; 96
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	a9 01       	movw	r20, r18
    14f0:	0e 94 9f 19 	call	0x333e	; 0x333e <LCD_displayStringRowColumn>
	UART_sendByte(TRY_PASS_AGAIN);
    14f4:	8e e1       	ldi	r24, 0x1E	; 30
    14f6:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
	while(UART_recieveByte()!=CONTROL_READY){}
    14fa:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    14fe:	8b 30       	cpi	r24, 0x0B	; 11
    1500:	e1 f7       	brne	.-8      	; 0x14fa <Try_again+0x32>
    1502:	ac c0       	rjmp	.+344    	; 0x165c <Try_again+0x194>
	while(trials<3){
		for (uint8 i=0;i<Array_size;i++){
    1504:	1f 86       	std	Y+15, r1	; 0x0f
    1506:	94 c0       	rjmp	.+296    	; 0x1630 <Try_again+0x168>
			pass_try[i] = KEYPAD_getPressedKey();
    1508:	8f 85       	ldd	r24, Y+15	; 0x0f
    150a:	08 2f       	mov	r16, r24
    150c:	10 e0       	ldi	r17, 0x00	; 0
    150e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
    1512:	28 2f       	mov	r18, r24
    1514:	ce 01       	movw	r24, r28
    1516:	41 96       	adiw	r24, 0x11	; 17
    1518:	fc 01       	movw	r30, r24
    151a:	e0 0f       	add	r30, r16
    151c:	f1 1f       	adc	r31, r17
    151e:	20 83       	st	Z, r18
			LCD_moveCursor(1, i);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	6f 85       	ldd	r22, Y+15	; 0x0f
    1524:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_moveCursor>
			LCD_displayString("*");
    1528:	80 e7       	ldi	r24, 0x70	; 112
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_displayString>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	aa ef       	ldi	r26, 0xFA	; 250
    1536:	b3 e4       	ldi	r27, 0x43	; 67
    1538:	8b 87       	std	Y+11, r24	; 0x0b
    153a:	9c 87       	std	Y+12, r25	; 0x0c
    153c:	ad 87       	std	Y+13, r26	; 0x0d
    153e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1540:	6b 85       	ldd	r22, Y+11	; 0x0b
    1542:	7c 85       	ldd	r23, Y+12	; 0x0c
    1544:	8d 85       	ldd	r24, Y+13	; 0x0d
    1546:	9e 85       	ldd	r25, Y+14	; 0x0e
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	4a e7       	ldi	r20, 0x7A	; 122
    154e:	53 e4       	ldi	r21, 0x43	; 67
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	8f 83       	std	Y+7, r24	; 0x07
    155a:	98 87       	std	Y+8, r25	; 0x08
    155c:	a9 87       	std	Y+9, r26	; 0x09
    155e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1574:	88 23       	and	r24, r24
    1576:	2c f4       	brge	.+10     	; 0x1582 <Try_again+0xba>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	3f c0       	rjmp	.+126    	; 0x1600 <Try_again+0x138>
	else if (__tmp > 65535)
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1596:	18 16       	cp	r1, r24
    1598:	4c f5       	brge	.+82     	; 0x15ec <Try_again+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159a:	6b 85       	ldd	r22, Y+11	; 0x0b
    159c:	7c 85       	ldd	r23, Y+12	; 0x0c
    159e:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	51 e4       	ldi	r21, 0x41	; 65
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <Try_again+0x11a>
    15c4:	89 e1       	ldi	r24, 0x19	; 25
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	8b 83       	std	Y+3, r24	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <Try_again+0x108>
    15d4:	9c 83       	std	Y+4, r25	; 0x04
    15d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	69 f7       	brne	.-38     	; 0x15c4 <Try_again+0xfc>
    15ea:	14 c0       	rjmp	.+40     	; 0x1614 <Try_again+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <Try_again+0x144>
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			UART_sendByte(pass_try[i]);
    1614:	8f 85       	ldd	r24, Y+15	; 0x0f
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	ce 01       	movw	r24, r28
    161c:	41 96       	adiw	r24, 0x11	; 17
    161e:	fc 01       	movw	r30, r24
    1620:	e2 0f       	add	r30, r18
    1622:	f3 1f       	adc	r31, r19
    1624:	80 81       	ld	r24, Z
    1626:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz enter pass:");
	UART_sendByte(TRY_PASS_AGAIN);
	while(UART_recieveByte()!=CONTROL_READY){}
	while(trials<3){
		for (uint8 i=0;i<Array_size;i++){
    162a:	8f 85       	ldd	r24, Y+15	; 0x0f
    162c:	8f 5f       	subi	r24, 0xFF	; 255
    162e:	8f 87       	std	Y+15, r24	; 0x0f
    1630:	8f 85       	ldd	r24, Y+15	; 0x0f
    1632:	85 30       	cpi	r24, 0x05	; 5
    1634:	08 f4       	brcc	.+2      	; 0x1638 <Try_again+0x170>
    1636:	68 cf       	rjmp	.-304    	; 0x1508 <Try_again+0x40>
			LCD_moveCursor(1, i);
			LCD_displayString("*");
			_delay_ms(500);
			UART_sendByte(pass_try[i]);
		}
		while(UART_recieveByte()!=CONTROL_READY){}
    1638:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    163c:	8b 30       	cpi	r24, 0x0B	; 11
    163e:	e1 f7       	brne	.-8      	; 0x1638 <Try_again+0x170>
		if (UART_recieveByte()==1){
    1640:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	19 f4       	brne	.+6      	; 0x164e <Try_again+0x186>
			return 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	8e 8b       	std	Y+22, r24	; 0x16
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <Try_again+0x19e>
		}
		else if(UART_recieveByte()==0){
    164e:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    1652:	88 23       	and	r24, r24
    1654:	19 f4       	brne	.+6      	; 0x165c <Try_again+0x194>
			trials++;
    1656:	88 89       	ldd	r24, Y+16	; 0x10
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 pass_try[Array_size],trials=0;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz enter pass:");
	UART_sendByte(TRY_PASS_AGAIN);
	while(UART_recieveByte()!=CONTROL_READY){}
	while(trials<3){
    165c:	88 89       	ldd	r24, Y+16	; 0x10
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	08 f4       	brcc	.+2      	; 0x1664 <Try_again+0x19c>
    1662:	50 cf       	rjmp	.-352    	; 0x1504 <Try_again+0x3c>
		}
		else if(UART_recieveByte()==0){
			trials++;
		}
	}
	return 0;
    1664:	1e 8a       	std	Y+22, r1	; 0x16
    1666:	8e 89       	ldd	r24, Y+22	; 0x16
}
    1668:	66 96       	adiw	r28, 0x16	; 22
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <GPIO_setupPinDirection+0x6>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <GPIO_setupPinDirection+0x8>
    1686:	0f 92       	push	r0
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02
    1690:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	08 f0       	brcs	.+2      	; 0x169a <GPIO_setupPinDirection+0x1c>
    1698:	d5 c0       	rjmp	.+426    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <GPIO_setupPinDirection+0x24>
    16a0:	d1 c0       	rjmp	.+418    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3d 83       	std	Y+5, r19	; 0x05
    16aa:	2c 83       	std	Y+4, r18	; 0x04
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <GPIO_setupPinDirection+0x3a>
    16b6:	43 c0       	rjmp	.+134    	; 0x173e <GPIO_setupPinDirection+0xc0>
    16b8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ba:	3d 81       	ldd	r19, Y+5	; 0x05
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	2c f4       	brge	.+10     	; 0x16cc <GPIO_setupPinDirection+0x4e>
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	71 f0       	breq	.+28     	; 0x16e6 <GPIO_setupPinDirection+0x68>
    16ca:	bc c0       	rjmp	.+376    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
    16cc:	2c 81       	ldd	r18, Y+4	; 0x04
    16ce:	3d 81       	ldd	r19, Y+5	; 0x05
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <GPIO_setupPinDirection+0x5a>
    16d6:	5f c0       	rjmp	.+190    	; 0x1796 <GPIO_setupPinDirection+0x118>
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <GPIO_setupPinDirection+0x66>
    16e2:	85 c0       	rjmp	.+266    	; 0x17ee <GPIO_setupPinDirection+0x170>
    16e4:	af c0       	rjmp	.+350    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	a1 f4       	brne	.+40     	; 0x1714 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16ec:	aa e3       	ldi	r26, 0x3A	; 58
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ea e3       	ldi	r30, 0x3A	; 58
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_setupPinDirection+0x8c>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_setupPinDirection+0x88>
    170e:	84 2b       	or	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	98 c0       	rjmp	.+304    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1714:	aa e3       	ldi	r26, 0x3A	; 58
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	ea e3       	ldi	r30, 0x3A	; 58
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <GPIO_setupPinDirection+0xb4>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <GPIO_setupPinDirection+0xb0>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	83 c0       	rjmp	.+262    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	a1 f4       	brne	.+40     	; 0x176c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1744:	a7 e3       	ldi	r26, 0x37	; 55
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e7 e3       	ldi	r30, 0x37	; 55
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_setupPinDirection+0xe4>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_setupPinDirection+0xe0>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	6c c0       	rjmp	.+216    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    176c:	a7 e3       	ldi	r26, 0x37	; 55
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e7 e3       	ldi	r30, 0x37	; 55
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_setupPinDirection+0x10c>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_setupPinDirection+0x108>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	57 c0       	rjmp	.+174    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	a1 f4       	brne	.+40     	; 0x17c4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    179c:	a4 e3       	ldi	r26, 0x34	; 52
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e4 e3       	ldi	r30, 0x34	; 52
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <GPIO_setupPinDirection+0x13c>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <GPIO_setupPinDirection+0x138>
    17be:	84 2b       	or	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	40 c0       	rjmp	.+128    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17c4:	a4 e3       	ldi	r26, 0x34	; 52
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e4 e3       	ldi	r30, 0x34	; 52
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_setupPinDirection+0x164>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_setupPinDirection+0x160>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	2b c0       	rjmp	.+86     	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	a1 f4       	brne	.+40     	; 0x181c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17f4:	a1 e3       	ldi	r26, 0x31	; 49
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e1 e3       	ldi	r30, 0x31	; 49
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GPIO_setupPinDirection+0x194>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <GPIO_setupPinDirection+0x190>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    181c:	a1 e3       	ldi	r26, 0x31	; 49
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e1 e3       	ldi	r30, 0x31	; 49
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_setupPinDirection+0x1bc>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_setupPinDirection+0x1b8>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <GPIO_writePin+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <GPIO_writePin+0x8>
    185c:	0f 92       	push	r0
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	6a 83       	std	Y+2, r22	; 0x02
    1866:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	08 f0       	brcs	.+2      	; 0x1870 <GPIO_writePin+0x1c>
    186e:	d5 c0       	rjmp	.+426    	; 0x1a1a <GPIO_writePin+0x1c6>
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f0       	brcs	.+2      	; 0x1878 <GPIO_writePin+0x24>
    1876:	d1 c0       	rjmp	.+418    	; 0x1a1a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	3d 83       	std	Y+5, r19	; 0x05
    1880:	2c 83       	std	Y+4, r18	; 0x04
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <GPIO_writePin+0x3a>
    188c:	43 c0       	rjmp	.+134    	; 0x1914 <GPIO_writePin+0xc0>
    188e:	2c 81       	ldd	r18, Y+4	; 0x04
    1890:	3d 81       	ldd	r19, Y+5	; 0x05
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	2c f4       	brge	.+10     	; 0x18a2 <GPIO_writePin+0x4e>
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	71 f0       	breq	.+28     	; 0x18bc <GPIO_writePin+0x68>
    18a0:	bc c0       	rjmp	.+376    	; 0x1a1a <GPIO_writePin+0x1c6>
    18a2:	2c 81       	ldd	r18, Y+4	; 0x04
    18a4:	3d 81       	ldd	r19, Y+5	; 0x05
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <GPIO_writePin+0x5a>
    18ac:	5f c0       	rjmp	.+190    	; 0x196c <GPIO_writePin+0x118>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <GPIO_writePin+0x66>
    18b8:	85 c0       	rjmp	.+266    	; 0x19c4 <GPIO_writePin+0x170>
    18ba:	af c0       	rjmp	.+350    	; 0x1a1a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	a1 f4       	brne	.+40     	; 0x18ea <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_writePin+0x8c>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_writePin+0x88>
    18e4:	84 2b       	or	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	98 c0       	rjmp	.+304    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18ea:	ab e3       	ldi	r26, 0x3B	; 59
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e3       	ldi	r30, 0x3B	; 59
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_writePin+0xb4>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_writePin+0xb0>
    190c:	80 95       	com	r24
    190e:	84 23       	and	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	83 c0       	rjmp	.+262    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	a1 f4       	brne	.+40     	; 0x1942 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    191a:	a8 e3       	ldi	r26, 0x38	; 56
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e8 e3       	ldi	r30, 0x38	; 56
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_writePin+0xe4>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_writePin+0xe0>
    193c:	84 2b       	or	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	6c c0       	rjmp	.+216    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1942:	a8 e3       	ldi	r26, 0x38	; 56
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e8 e3       	ldi	r30, 0x38	; 56
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <GPIO_writePin+0x10c>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <GPIO_writePin+0x108>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	57 c0       	rjmp	.+174    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	a1 f4       	brne	.+40     	; 0x199a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1972:	a5 e3       	ldi	r26, 0x35	; 53
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e5 e3       	ldi	r30, 0x35	; 53
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <GPIO_writePin+0x13c>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <GPIO_writePin+0x138>
    1994:	84 2b       	or	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	40 c0       	rjmp	.+128    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    199a:	a5 e3       	ldi	r26, 0x35	; 53
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e3       	ldi	r30, 0x35	; 53
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <GPIO_writePin+0x164>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <GPIO_writePin+0x160>
    19bc:	80 95       	com	r24
    19be:	84 23       	and	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	2b c0       	rjmp	.+86     	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	a1 f4       	brne	.+40     	; 0x19f2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19ca:	a2 e3       	ldi	r26, 0x32	; 50
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e2 e3       	ldi	r30, 0x32	; 50
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <GPIO_writePin+0x194>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <GPIO_writePin+0x190>
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19f2:	a2 e3       	ldi	r26, 0x32	; 50
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e2 e3       	ldi	r30, 0x32	; 50
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <GPIO_writePin+0x1bc>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <GPIO_writePin+0x1b8>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <GPIO_readPin+0x6>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <GPIO_readPin+0x8>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	8a 83       	std	Y+2, r24	; 0x02
    1a3a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <GPIO_readPin+0x1c>
    1a44:	84 c0       	rjmp	.+264    	; 0x1b4e <GPIO_readPin+0x124>
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <GPIO_readPin+0x24>
    1a4c:	80 c0       	rjmp	.+256    	; 0x1b4e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3d 83       	std	Y+5, r19	; 0x05
    1a56:	2c 83       	std	Y+4, r18	; 0x04
    1a58:	4c 81       	ldd	r20, Y+4	; 0x04
    1a5a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a5c:	41 30       	cpi	r20, 0x01	; 1
    1a5e:	51 05       	cpc	r21, r1
    1a60:	79 f1       	breq	.+94     	; 0x1ac0 <GPIO_readPin+0x96>
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	34 f4       	brge	.+12     	; 0x1a78 <GPIO_readPin+0x4e>
    1a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a70:	21 15       	cp	r18, r1
    1a72:	31 05       	cpc	r19, r1
    1a74:	69 f0       	breq	.+26     	; 0x1a90 <GPIO_readPin+0x66>
    1a76:	6b c0       	rjmp	.+214    	; 0x1b4e <GPIO_readPin+0x124>
    1a78:	4c 81       	ldd	r20, Y+4	; 0x04
    1a7a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7c:	42 30       	cpi	r20, 0x02	; 2
    1a7e:	51 05       	cpc	r21, r1
    1a80:	b9 f1       	breq	.+110    	; 0x1af0 <GPIO_readPin+0xc6>
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	9d 81       	ldd	r25, Y+5	; 0x05
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	91 05       	cpc	r25, r1
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <GPIO_readPin+0x64>
    1a8c:	49 c0       	rjmp	.+146    	; 0x1b20 <GPIO_readPin+0xf6>
    1a8e:	5f c0       	rjmp	.+190    	; 0x1b4e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a90:	e9 e3       	ldi	r30, 0x39	; 57
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a9 01       	movw	r20, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_readPin+0x7e>
    1aa4:	55 95       	asr	r21
    1aa6:	47 95       	ror	r20
    1aa8:	8a 95       	dec	r24
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_readPin+0x7a>
    1aac:	ca 01       	movw	r24, r20
    1aae:	81 70       	andi	r24, 0x01	; 1
    1ab0:	90 70       	andi	r25, 0x00	; 0
    1ab2:	88 23       	and	r24, r24
    1ab4:	19 f0       	breq	.+6      	; 0x1abc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	49 c0       	rjmp	.+146    	; 0x1b4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1abc:	19 82       	std	Y+1, r1	; 0x01
    1abe:	47 c0       	rjmp	.+142    	; 0x1b4e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ac0:	e6 e3       	ldi	r30, 0x36	; 54
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <GPIO_readPin+0xae>
    1ad4:	55 95       	asr	r21
    1ad6:	47 95       	ror	r20
    1ad8:	8a 95       	dec	r24
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <GPIO_readPin+0xaa>
    1adc:	ca 01       	movw	r24, r20
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	88 23       	and	r24, r24
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	31 c0       	rjmp	.+98     	; 0x1b4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aec:	19 82       	std	Y+1, r1	; 0x01
    1aee:	2f c0       	rjmp	.+94     	; 0x1b4e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1af0:	e3 e3       	ldi	r30, 0x33	; 51
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a9 01       	movw	r20, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_readPin+0xde>
    1b04:	55 95       	asr	r21
    1b06:	47 95       	ror	r20
    1b08:	8a 95       	dec	r24
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_readPin+0xda>
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	90 70       	andi	r25, 0x00	; 0
    1b12:	88 23       	and	r24, r24
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	19 c0       	rjmp	.+50     	; 0x1b4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	17 c0       	rjmp	.+46     	; 0x1b4e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b20:	e0 e3       	ldi	r30, 0x30	; 48
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a9 01       	movw	r20, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_readPin+0x10e>
    1b34:	55 95       	asr	r21
    1b36:	47 95       	ror	r20
    1b38:	8a 95       	dec	r24
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_readPin+0x10a>
    1b3c:	ca 01       	movw	r24, r20
    1b3e:	81 70       	andi	r24, 0x01	; 1
    1b40:	90 70       	andi	r25, 0x00	; 0
    1b42:	88 23       	and	r24, r24
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b4c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <GPIO_setupPortDirection+0x6>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <GPIO_setupPortDirection+0x8>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	84 30       	cpi	r24, 0x04	; 4
    1b74:	90 f5       	brcc	.+100    	; 0x1bda <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3c 83       	std	Y+4, r19	; 0x04
    1b7e:	2b 83       	std	Y+3, r18	; 0x03
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	91 05       	cpc	r25, r1
    1b88:	d1 f0       	breq	.+52     	; 0x1bbe <GPIO_setupPortDirection+0x5e>
    1b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8e:	22 30       	cpi	r18, 0x02	; 2
    1b90:	31 05       	cpc	r19, r1
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <GPIO_setupPortDirection+0x3e>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	61 f0       	breq	.+24     	; 0x1bb4 <GPIO_setupPortDirection+0x54>
    1b9c:	1e c0       	rjmp	.+60     	; 0x1bda <GPIO_setupPortDirection+0x7a>
    1b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	81 f0       	breq	.+32     	; 0x1bc8 <GPIO_setupPortDirection+0x68>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	83 30       	cpi	r24, 0x03	; 3
    1bae:	91 05       	cpc	r25, r1
    1bb0:	81 f0       	breq	.+32     	; 0x1bd2 <GPIO_setupPortDirection+0x72>
    1bb2:	13 c0       	rjmp	.+38     	; 0x1bda <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bb4:	ea e3       	ldi	r30, 0x3A	; 58
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	80 83       	st	Z, r24
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1bbe:	e7 e3       	ldi	r30, 0x37	; 55
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	80 83       	st	Z, r24
    1bc6:	09 c0       	rjmp	.+18     	; 0x1bda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bc8:	e4 e3       	ldi	r30, 0x34	; 52
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	80 83       	st	Z, r24
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bd2:	e1 e3       	ldi	r30, 0x31	; 49
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <GPIO_writePort+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <GPIO_writePort+0x8>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	84 30       	cpi	r24, 0x04	; 4
    1bfc:	90 f5       	brcc	.+100    	; 0x1c62 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	3c 83       	std	Y+4, r19	; 0x04
    1c06:	2b 83       	std	Y+3, r18	; 0x03
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	91 05       	cpc	r25, r1
    1c10:	d1 f0       	breq	.+52     	; 0x1c46 <GPIO_writePort+0x5e>
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <GPIO_writePort+0x3e>
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <GPIO_writePort+0x54>
    1c24:	1e c0       	rjmp	.+60     	; 0x1c62 <GPIO_writePort+0x7a>
    1c26:	2b 81       	ldd	r18, Y+3	; 0x03
    1c28:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <GPIO_writePort+0x68>
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	81 f0       	breq	.+32     	; 0x1c5a <GPIO_writePort+0x72>
    1c3a:	13 c0       	rjmp	.+38     	; 0x1c62 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c3c:	eb e3       	ldi	r30, 0x3B	; 59
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	80 83       	st	Z, r24
    1c44:	0e c0       	rjmp	.+28     	; 0x1c62 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c46:	e8 e3       	ldi	r30, 0x38	; 56
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	80 83       	st	Z, r24
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c50:	e5 e3       	ldi	r30, 0x35	; 53
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	80 83       	st	Z, r24
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c5a:	e2 e3       	ldi	r30, 0x32	; 50
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <GPIO_readPort+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <GPIO_readPort+0x8>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c7e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	84 30       	cpi	r24, 0x04	; 4
    1c84:	90 f5       	brcc	.+100    	; 0x1cea <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	3c 83       	std	Y+4, r19	; 0x04
    1c8e:	2b 83       	std	Y+3, r18	; 0x03
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	91 05       	cpc	r25, r1
    1c98:	d1 f0       	breq	.+52     	; 0x1cce <GPIO_readPort+0x5e>
    1c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <GPIO_readPort+0x3e>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	61 f0       	breq	.+24     	; 0x1cc4 <GPIO_readPort+0x54>
    1cac:	1e c0       	rjmp	.+60     	; 0x1cea <GPIO_readPort+0x7a>
    1cae:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	81 f0       	breq	.+32     	; 0x1cd8 <GPIO_readPort+0x68>
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	83 30       	cpi	r24, 0x03	; 3
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	81 f0       	breq	.+32     	; 0x1ce2 <GPIO_readPort+0x72>
    1cc2:	13 c0       	rjmp	.+38     	; 0x1cea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cc4:	e9 e3       	ldi	r30, 0x39	; 57
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	0e c0       	rjmp	.+28     	; 0x1cea <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cce:	e6 e3       	ldi	r30, 0x36	; 54
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cd8:	e3 e3       	ldi	r30, 0x33	; 51
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ce2:	e0 e3       	ldi	r30, 0x30	; 48
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <KEYPAD_getPressedKey+0x6>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	62 e0       	ldi	r22, 0x02	; 2
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	63 e0       	ldi	r22, 0x03	; 3
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	64 e0       	ldi	r22, 0x04	; 4
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	65 e0       	ldi	r22, 0x05	; 5
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	66 e0       	ldi	r22, 0x06	; 6
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	67 e0       	ldi	r22, 0x07	; 7
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d54:	19 82       	std	Y+1, r1	; 0x01
    1d56:	35 c0       	rjmp	.+106    	; 0x1dc2 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	69 81       	ldd	r22, Y+1	; 0x01
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	69 81       	ldd	r22, Y+1	; 0x01
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d6c:	1a 82       	std	Y+2, r1	; 0x02
    1d6e:	1e c0       	rjmp	.+60     	; 0x1dac <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	98 2f       	mov	r25, r24
    1d74:	9c 5f       	subi	r25, 0xFC	; 252
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	69 2f       	mov	r22, r25
    1d7a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_readPin>
    1d7e:	88 23       	and	r24, r24
    1d80:	91 f4       	brne	.+36     	; 0x1da6 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	98 2f       	mov	r25, r24
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	89 0f       	add	r24, r25
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	8a 83       	std	Y+2, r24	; 0x02
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	84 30       	cpi	r24, 0x04	; 4
    1db0:	f8 f2       	brcs	.-66     	; 0x1d70 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	69 81       	ldd	r22, Y+1	; 0x01
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	8f 5f       	subi	r24, 0xFF	; 255
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	84 30       	cpi	r24, 0x04	; 4
    1dc6:	40 f2       	brcs	.-112    	; 0x1d58 <KEYPAD_getPressedKey+0x5e>
    1dc8:	c5 cf       	rjmp	.-118    	; 0x1d54 <KEYPAD_getPressedKey+0x5a>

00001dca <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1dd8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	3c 83       	std	Y+4, r19	; 0x04
    1de2:	2b 83       	std	Y+3, r18	; 0x03
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	88 30       	cpi	r24, 0x08	; 8
    1dea:	91 05       	cpc	r25, r1
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1dee:	70 c0       	rjmp	.+224    	; 0x1ed0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1df0:	2b 81       	ldd	r18, Y+3	; 0x03
    1df2:	3c 81       	ldd	r19, Y+4	; 0x04
    1df4:	29 30       	cpi	r18, 0x09	; 9
    1df6:	31 05       	cpc	r19, r1
    1df8:	5c f5       	brge	.+86     	; 0x1e50 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	84 30       	cpi	r24, 0x04	; 4
    1e00:	91 05       	cpc	r25, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1e04:	59 c0       	rjmp	.+178    	; 0x1eb8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	25 30       	cpi	r18, 0x05	; 5
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	9c f4       	brge	.+38     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	91 05       	cpc	r25, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e1a:	48 c0       	rjmp	.+144    	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e20:	23 30       	cpi	r18, 0x03	; 3
    1e22:	31 05       	cpc	r19, r1
    1e24:	0c f0       	brlt	.+2      	; 0x1e28 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e26:	45 c0       	rjmp	.+138    	; 0x1eb2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	91 05       	cpc	r25, r1
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e32:	39 c0       	rjmp	.+114    	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e34:	67 c0       	rjmp	.+206    	; 0x1f04 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e36:	2b 81       	ldd	r18, Y+3	; 0x03
    1e38:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3a:	26 30       	cpi	r18, 0x06	; 6
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e40:	41 c0       	rjmp	.+130    	; 0x1ec4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	87 30       	cpi	r24, 0x07	; 7
    1e48:	91 05       	cpc	r25, r1
    1e4a:	0c f0       	brlt	.+2      	; 0x1e4e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e4c:	3e c0       	rjmp	.+124    	; 0x1eca <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e4e:	37 c0       	rjmp	.+110    	; 0x1ebe <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e50:	2b 81       	ldd	r18, Y+3	; 0x03
    1e52:	3c 81       	ldd	r19, Y+4	; 0x04
    1e54:	2c 30       	cpi	r18, 0x0C	; 12
    1e56:	31 05       	cpc	r19, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e5a:	46 c0       	rjmp	.+140    	; 0x1ee8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	8d 30       	cpi	r24, 0x0D	; 13
    1e62:	91 05       	cpc	r25, r1
    1e64:	5c f4       	brge	.+22     	; 0x1e7c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	2a 30       	cpi	r18, 0x0A	; 10
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	b1 f1       	breq	.+108    	; 0x1edc <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	8b 30       	cpi	r24, 0x0B	; 11
    1e76:	91 05       	cpc	r25, r1
    1e78:	a4 f5       	brge	.+104    	; 0x1ee2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e7a:	2d c0       	rjmp	.+90     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	2e 30       	cpi	r18, 0x0E	; 14
    1e82:	31 05       	cpc	r19, r1
    1e84:	b9 f1       	breq	.+110    	; 0x1ef4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	8e 30       	cpi	r24, 0x0E	; 14
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	7c f1       	brlt	.+94     	; 0x1eee <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e90:	2b 81       	ldd	r18, Y+3	; 0x03
    1e92:	3c 81       	ldd	r19, Y+4	; 0x04
    1e94:	2f 30       	cpi	r18, 0x0F	; 15
    1e96:	31 05       	cpc	r19, r1
    1e98:	79 f1       	breq	.+94     	; 0x1ef8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	80 31       	cpi	r24, 0x10	; 16
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	69 f1       	breq	.+90     	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ea4:	2f c0       	rjmp	.+94     	; 0x1f04 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1ea6:	87 e0       	ldi	r24, 0x07	; 7
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	2e c0       	rjmp	.+92     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1eac:	88 e0       	ldi	r24, 0x08	; 8
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	2b c0       	rjmp	.+86     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1eb2:	89 e0       	ldi	r24, 0x09	; 9
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	28 c0       	rjmp	.+80     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1eb8:	85 e2       	ldi	r24, 0x25	; 37
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	25 c0       	rjmp	.+74     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ebe:	84 e0       	ldi	r24, 0x04	; 4
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	22 c0       	rjmp	.+68     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1ec4:	85 e0       	ldi	r24, 0x05	; 5
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	1f c0       	rjmp	.+62     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1eca:	86 e0       	ldi	r24, 0x06	; 6
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	1c c0       	rjmp	.+56     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ed0:	8a e2       	ldi	r24, 0x2A	; 42
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	19 c0       	rjmp	.+50     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	16 c0       	rjmp	.+44     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	13 c0       	rjmp	.+38     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1ee2:	83 e0       	ldi	r24, 0x03	; 3
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	10 c0       	rjmp	.+32     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ee8:	8d e2       	ldi	r24, 0x2D	; 45
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	0d c0       	rjmp	.+26     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1eee:	8d e0       	ldi	r24, 0x0D	; 13
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	0a c0       	rjmp	.+20     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1ef4:	19 82       	std	Y+1, r1	; 0x01
    1ef6:	08 c0       	rjmp	.+16     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1ef8:	8d e3       	ldi	r24, 0x3D	; 61
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1efe:	8b e2       	ldi	r24, 0x2B	; 43
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	2e 97       	sbiw	r28, 0x0e	; 14
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	61 e0       	ldi	r22, 0x01	; 1
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 ea       	ldi	r26, 0xA0	; 160
    1f46:	b1 e4       	ldi	r27, 0x41	; 65
    1f48:	8b 87       	std	Y+11, r24	; 0x0b
    1f4a:	9c 87       	std	Y+12, r25	; 0x0c
    1f4c:	ad 87       	std	Y+13, r26	; 0x0d
    1f4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a e7       	ldi	r20, 0x7A	; 122
    1f5e:	53 e4       	ldi	r21, 0x43	; 67
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8f 83       	std	Y+7, r24	; 0x07
    1f6a:	98 87       	std	Y+8, r25	; 0x08
    1f6c:	a9 87       	std	Y+9, r26	; 0x09
    1f6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <LCD_init+0x7a>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f92:	6f 81       	ldd	r22, Y+7	; 0x07
    1f94:	78 85       	ldd	r23, Y+8	; 0x08
    1f96:	89 85       	ldd	r24, Y+9	; 0x09
    1f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <LCD_init+0xda>
    1fd4:	89 e1       	ldi	r24, 0x19	; 25
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LCD_init+0xc8>
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <LCD_init+0xbc>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_init+0x104>
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	63 e0       	ldi	r22, 0x03	; 3
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    204c:	83 e3       	ldi	r24, 0x33	; 51
    204e:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2052:	82 e3       	ldi	r24, 0x32	; 50
    2054:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2058:	88 e2       	ldi	r24, 0x28	; 40
    205a:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    205e:	8c e0       	ldi	r24, 0x0C	; 12
    2060:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
}
    206a:	2e 96       	adiw	r28, 0x0e	; 14
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	c3 56       	subi	r28, 0x63	; 99
    208a:	d0 40       	sbci	r29, 0x00	; 0
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	fe 01       	movw	r30, r28
    2098:	ed 59       	subi	r30, 0x9D	; 157
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	61 e0       	ldi	r22, 0x01	; 1
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    20a8:	fe 01       	movw	r30, r28
    20aa:	e1 5a       	subi	r30, 0xA1	; 161
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 e8       	ldi	r26, 0x80	; 128
    20b4:	bf e3       	ldi	r27, 0x3F	; 63
    20b6:	80 83       	st	Z, r24
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	a2 83       	std	Z+2, r26	; 0x02
    20bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	8e 01       	movw	r16, r28
    20c0:	05 5a       	subi	r16, 0xA5	; 165
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	fe 01       	movw	r30, r28
    20c6:	e1 5a       	subi	r30, 0xA1	; 161
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	60 81       	ld	r22, Z
    20cc:	71 81       	ldd	r23, Z+1	; 0x01
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	93 81       	ldd	r25, Z+3	; 0x03
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a e7       	ldi	r20, 0x7A	; 122
    20d8:	53 e4       	ldi	r21, 0x43	; 67
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	f8 01       	movw	r30, r16
    20e4:	80 83       	st	Z, r24
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	a2 83       	std	Z+2, r26	; 0x02
    20ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ec:	fe 01       	movw	r30, r28
    20ee:	e5 5a       	subi	r30, 0xA5	; 165
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	5f e3       	ldi	r21, 0x3F	; 63
    2102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2106:	88 23       	and	r24, r24
    2108:	44 f4       	brge	.+16     	; 0x211a <LCD_sendCommand+0x9e>
		__ticks = 1;
    210a:	fe 01       	movw	r30, r28
    210c:	e7 5a       	subi	r30, 0xA7	; 167
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
    2118:	64 c0       	rjmp	.+200    	; 0x21e2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    211a:	fe 01       	movw	r30, r28
    211c:	e5 5a       	subi	r30, 0xA5	; 165
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	3f ef       	ldi	r19, 0xFF	; 255
    212c:	4f e7       	ldi	r20, 0x7F	; 127
    212e:	57 e4       	ldi	r21, 0x47	; 71
    2130:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2134:	18 16       	cp	r1, r24
    2136:	0c f0       	brlt	.+2      	; 0x213a <LCD_sendCommand+0xbe>
    2138:	43 c0       	rjmp	.+134    	; 0x21c0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	fe 01       	movw	r30, r28
    213c:	e1 5a       	subi	r30, 0xA1	; 161
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	93 81       	ldd	r25, Z+3	; 0x03
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	8e 01       	movw	r16, r28
    215a:	07 5a       	subi	r16, 0xA7	; 167
    215c:	1f 4f       	sbci	r17, 0xFF	; 255
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	f8 01       	movw	r30, r16
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
    2170:	1f c0       	rjmp	.+62     	; 0x21b0 <LCD_sendCommand+0x134>
    2172:	fe 01       	movw	r30, r28
    2174:	e9 5a       	subi	r30, 0xA9	; 169
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	89 e1       	ldi	r24, 0x19	; 25
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	fe 01       	movw	r30, r28
    2182:	e9 5a       	subi	r30, 0xA9	; 169
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_sendCommand+0x10e>
    218e:	fe 01       	movw	r30, r28
    2190:	e9 5a       	subi	r30, 0xA9	; 169
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	de 01       	movw	r26, r28
    219a:	a7 5a       	subi	r26, 0xA7	; 167
    219c:	bf 4f       	sbci	r27, 0xFF	; 255
    219e:	fe 01       	movw	r30, r28
    21a0:	e7 5a       	subi	r30, 0xA7	; 167
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	9c 93       	st	X, r25
    21ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	fe 01       	movw	r30, r28
    21b2:	e7 5a       	subi	r30, 0xA7	; 167
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	d1 f6       	brne	.-76     	; 0x2172 <LCD_sendCommand+0xf6>
    21be:	27 c0       	rjmp	.+78     	; 0x220e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c0:	8e 01       	movw	r16, r28
    21c2:	07 5a       	subi	r16, 0xA7	; 167
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	fe 01       	movw	r30, r28
    21c8:	e5 5a       	subi	r30, 0xA5	; 165
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	f8 01       	movw	r30, r16
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    21e2:	de 01       	movw	r26, r28
    21e4:	ab 5a       	subi	r26, 0xAB	; 171
    21e6:	bf 4f       	sbci	r27, 0xFF	; 255
    21e8:	fe 01       	movw	r30, r28
    21ea:	e7 5a       	subi	r30, 0xA7	; 167
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	8d 93       	st	X+, r24
    21f4:	9c 93       	st	X, r25
    21f6:	fe 01       	movw	r30, r28
    21f8:	eb 5a       	subi	r30, 0xAB	; 171
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_sendCommand+0x184>
    2204:	fe 01       	movw	r30, r28
    2206:	eb 5a       	subi	r30, 0xAB	; 171
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	62 e0       	ldi	r22, 0x02	; 2
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2218:	fe 01       	movw	r30, r28
    221a:	ef 5a       	subi	r30, 0xAF	; 175
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	a0 e8       	ldi	r26, 0x80	; 128
    2224:	bf e3       	ldi	r27, 0x3F	; 63
    2226:	80 83       	st	Z, r24
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	a2 83       	std	Z+2, r26	; 0x02
    222c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222e:	8e 01       	movw	r16, r28
    2230:	03 5b       	subi	r16, 0xB3	; 179
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    2234:	fe 01       	movw	r30, r28
    2236:	ef 5a       	subi	r30, 0xAF	; 175
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	60 81       	ld	r22, Z
    223c:	71 81       	ldd	r23, Z+1	; 0x01
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4a e7       	ldi	r20, 0x7A	; 122
    2248:	53 e4       	ldi	r21, 0x43	; 67
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	f8 01       	movw	r30, r16
    2254:	80 83       	st	Z, r24
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	a2 83       	std	Z+2, r26	; 0x02
    225a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    225c:	fe 01       	movw	r30, r28
    225e:	e3 5b       	subi	r30, 0xB3	; 179
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	60 81       	ld	r22, Z
    2264:	71 81       	ldd	r23, Z+1	; 0x01
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e8       	ldi	r20, 0x80	; 128
    2270:	5f e3       	ldi	r21, 0x3F	; 63
    2272:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2276:	88 23       	and	r24, r24
    2278:	44 f4       	brge	.+16     	; 0x228a <LCD_sendCommand+0x20e>
		__ticks = 1;
    227a:	fe 01       	movw	r30, r28
    227c:	e5 5b       	subi	r30, 0xB5	; 181
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	80 83       	st	Z, r24
    2288:	64 c0       	rjmp	.+200    	; 0x2352 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    228a:	fe 01       	movw	r30, r28
    228c:	e3 5b       	subi	r30, 0xB3	; 179
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	0c f0       	brlt	.+2      	; 0x22aa <LCD_sendCommand+0x22e>
    22a8:	43 c0       	rjmp	.+134    	; 0x2330 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22aa:	fe 01       	movw	r30, r28
    22ac:	ef 5a       	subi	r30, 0xAF	; 175
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e2       	ldi	r20, 0x20	; 32
    22be:	51 e4       	ldi	r21, 0x41	; 65
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	8e 01       	movw	r16, r28
    22ca:	05 5b       	subi	r16, 0xB5	; 181
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	f8 01       	movw	r30, r16
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	1f c0       	rjmp	.+62     	; 0x2320 <LCD_sendCommand+0x2a4>
    22e2:	fe 01       	movw	r30, r28
    22e4:	e7 5b       	subi	r30, 0xB7	; 183
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	89 e1       	ldi	r24, 0x19	; 25
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
    22f0:	fe 01       	movw	r30, r28
    22f2:	e7 5b       	subi	r30, 0xB7	; 183
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_sendCommand+0x27e>
    22fe:	fe 01       	movw	r30, r28
    2300:	e7 5b       	subi	r30, 0xB7	; 183
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	de 01       	movw	r26, r28
    230a:	a5 5b       	subi	r26, 0xB5	; 181
    230c:	bf 4f       	sbci	r27, 0xFF	; 255
    230e:	fe 01       	movw	r30, r28
    2310:	e5 5b       	subi	r30, 0xB5	; 181
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	9c 93       	st	X, r25
    231e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	fe 01       	movw	r30, r28
    2322:	e5 5b       	subi	r30, 0xB5	; 181
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	d1 f6       	brne	.-76     	; 0x22e2 <LCD_sendCommand+0x266>
    232e:	27 c0       	rjmp	.+78     	; 0x237e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	8e 01       	movw	r16, r28
    2332:	05 5b       	subi	r16, 0xB5	; 181
    2334:	1f 4f       	sbci	r17, 0xFF	; 255
    2336:	fe 01       	movw	r30, r28
    2338:	e3 5b       	subi	r30, 0xB3	; 179
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	60 81       	ld	r22, Z
    233e:	71 81       	ldd	r23, Z+1	; 0x01
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	f8 01       	movw	r30, r16
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
    2352:	de 01       	movw	r26, r28
    2354:	a9 5b       	subi	r26, 0xB9	; 185
    2356:	bf 4f       	sbci	r27, 0xFF	; 255
    2358:	fe 01       	movw	r30, r28
    235a:	e5 5b       	subi	r30, 0xB5	; 181
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	8d 93       	st	X+, r24
    2364:	9c 93       	st	X, r25
    2366:	fe 01       	movw	r30, r28
    2368:	e9 5b       	subi	r30, 0xB9	; 185
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_sendCommand+0x2f4>
    2374:	fe 01       	movw	r30, r28
    2376:	e9 5b       	subi	r30, 0xB9	; 185
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    237e:	fe 01       	movw	r30, r28
    2380:	ed 59       	subi	r30, 0x9D	; 157
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	80 71       	andi	r24, 0x10	; 16
    238c:	90 70       	andi	r25, 0x00	; 0
    238e:	95 95       	asr	r25
    2390:	87 95       	ror	r24
    2392:	95 95       	asr	r25
    2394:	87 95       	ror	r24
    2396:	95 95       	asr	r25
    2398:	87 95       	ror	r24
    239a:	95 95       	asr	r25
    239c:	87 95       	ror	r24
    239e:	98 2f       	mov	r25, r24
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	49 2f       	mov	r20, r25
    23a6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    23aa:	fe 01       	movw	r30, r28
    23ac:	ed 59       	subi	r30, 0x9D	; 157
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	80 81       	ld	r24, Z
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	80 72       	andi	r24, 0x20	; 32
    23b8:	90 70       	andi	r25, 0x00	; 0
    23ba:	95 95       	asr	r25
    23bc:	87 95       	ror	r24
    23be:	95 95       	asr	r25
    23c0:	87 95       	ror	r24
    23c2:	95 95       	asr	r25
    23c4:	87 95       	ror	r24
    23c6:	95 95       	asr	r25
    23c8:	87 95       	ror	r24
    23ca:	95 95       	asr	r25
    23cc:	87 95       	ror	r24
    23ce:	98 2f       	mov	r25, r24
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	49 2f       	mov	r20, r25
    23d6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    23da:	fe 01       	movw	r30, r28
    23dc:	ed 59       	subi	r30, 0x9D	; 157
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	80 74       	andi	r24, 0x40	; 64
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	08 2e       	mov	r0, r24
    23ec:	89 2f       	mov	r24, r25
    23ee:	00 0c       	add	r0, r0
    23f0:	88 1f       	adc	r24, r24
    23f2:	99 0b       	sbc	r25, r25
    23f4:	00 0c       	add	r0, r0
    23f6:	88 1f       	adc	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	98 2f       	mov	r25, r24
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	62 e0       	ldi	r22, 0x02	; 2
    2400:	49 2f       	mov	r20, r25
    2402:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2406:	fe 01       	movw	r30, r28
    2408:	ed 59       	subi	r30, 0x9D	; 157
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	98 2f       	mov	r25, r24
    2410:	99 1f       	adc	r25, r25
    2412:	99 27       	eor	r25, r25
    2414:	99 1f       	adc	r25, r25
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	63 e0       	ldi	r22, 0x03	; 3
    241a:	49 2f       	mov	r20, r25
    241c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2420:	fe 01       	movw	r30, r28
    2422:	ed 5b       	subi	r30, 0xBD	; 189
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	80 83       	st	Z, r24
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	a2 83       	std	Z+2, r26	; 0x02
    2434:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	8e 01       	movw	r16, r28
    2438:	01 5c       	subi	r16, 0xC1	; 193
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	ed 5b       	subi	r30, 0xBD	; 189
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a e7       	ldi	r20, 0x7A	; 122
    2450:	53 e4       	ldi	r21, 0x43	; 67
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	f8 01       	movw	r30, r16
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2464:	fe 01       	movw	r30, r28
    2466:	ff 96       	adiw	r30, 0x3f	; 63
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <LCD_sendCommand+0x40e>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e af       	std	Y+62, r25	; 0x3e
    2486:	8d af       	std	Y+61, r24	; 0x3d
    2488:	46 c0       	rjmp	.+140    	; 0x2516 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    248a:	fe 01       	movw	r30, r28
    248c:	ff 96       	adiw	r30, 0x3f	; 63
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	3f ef       	ldi	r19, 0xFF	; 255
    249a:	4f e7       	ldi	r20, 0x7F	; 127
    249c:	57 e4       	ldi	r21, 0x47	; 71
    249e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a2:	18 16       	cp	r1, r24
    24a4:	64 f5       	brge	.+88     	; 0x24fe <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a6:	fe 01       	movw	r30, r28
    24a8:	ed 5b       	subi	r30, 0xBD	; 189
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9e af       	std	Y+62, r25	; 0x3e
    24d2:	8d af       	std	Y+61, r24	; 0x3d
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <LCD_sendCommand+0x478>
    24d6:	89 e1       	ldi	r24, 0x19	; 25
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9c af       	std	Y+60, r25	; 0x3c
    24dc:	8b af       	std	Y+59, r24	; 0x3b
    24de:	8b ad       	ldd	r24, Y+59	; 0x3b
    24e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_sendCommand+0x466>
    24e6:	9c af       	std	Y+60, r25	; 0x3c
    24e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9e af       	std	Y+62, r25	; 0x3e
    24f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <LCD_sendCommand+0x45a>
    24fc:	16 c0       	rjmp	.+44     	; 0x252a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	fe 01       	movw	r30, r28
    2500:	ff 96       	adiw	r30, 0x3f	; 63
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9e af       	std	Y+62, r25	; 0x3e
    2514:	8d af       	std	Y+61, r24	; 0x3d
    2516:	8d ad       	ldd	r24, Y+61	; 0x3d
    2518:	9e ad       	ldd	r25, Y+62	; 0x3e
    251a:	9a af       	std	Y+58, r25	; 0x3a
    251c:	89 af       	std	Y+57, r24	; 0x39
    251e:	89 ad       	ldd	r24, Y+57	; 0x39
    2520:	9a ad       	ldd	r25, Y+58	; 0x3a
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_sendCommand+0x4a6>
    2526:	9a af       	std	Y+58, r25	; 0x3a
    2528:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	62 e0       	ldi	r22, 0x02	; 2
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	a0 e8       	ldi	r26, 0x80	; 128
    253a:	bf e3       	ldi	r27, 0x3F	; 63
    253c:	8d ab       	std	Y+53, r24	; 0x35
    253e:	9e ab       	std	Y+54, r25	; 0x36
    2540:	af ab       	std	Y+55, r26	; 0x37
    2542:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2544:	6d a9       	ldd	r22, Y+53	; 0x35
    2546:	7e a9       	ldd	r23, Y+54	; 0x36
    2548:	8f a9       	ldd	r24, Y+55	; 0x37
    254a:	98 ad       	ldd	r25, Y+56	; 0x38
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4a e7       	ldi	r20, 0x7A	; 122
    2552:	53 e4       	ldi	r21, 0x43	; 67
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	89 ab       	std	Y+49, r24	; 0x31
    255e:	9a ab       	std	Y+50, r25	; 0x32
    2560:	ab ab       	std	Y+51, r26	; 0x33
    2562:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2564:	69 a9       	ldd	r22, Y+49	; 0x31
    2566:	7a a9       	ldd	r23, Y+50	; 0x32
    2568:	8b a9       	ldd	r24, Y+51	; 0x33
    256a:	9c a9       	ldd	r25, Y+52	; 0x34
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e8       	ldi	r20, 0x80	; 128
    2572:	5f e3       	ldi	r21, 0x3F	; 63
    2574:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2578:	88 23       	and	r24, r24
    257a:	2c f4       	brge	.+10     	; 0x2586 <LCD_sendCommand+0x50a>
		__ticks = 1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	98 ab       	std	Y+48, r25	; 0x30
    2582:	8f a7       	std	Y+47, r24	; 0x2f
    2584:	3f c0       	rjmp	.+126    	; 0x2604 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2586:	69 a9       	ldd	r22, Y+49	; 0x31
    2588:	7a a9       	ldd	r23, Y+50	; 0x32
    258a:	8b a9       	ldd	r24, Y+51	; 0x33
    258c:	9c a9       	ldd	r25, Y+52	; 0x34
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	3f ef       	ldi	r19, 0xFF	; 255
    2592:	4f e7       	ldi	r20, 0x7F	; 127
    2594:	57 e4       	ldi	r21, 0x47	; 71
    2596:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259a:	18 16       	cp	r1, r24
    259c:	4c f5       	brge	.+82     	; 0x25f0 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259e:	6d a9       	ldd	r22, Y+53	; 0x35
    25a0:	7e a9       	ldd	r23, Y+54	; 0x36
    25a2:	8f a9       	ldd	r24, Y+55	; 0x37
    25a4:	98 ad       	ldd	r25, Y+56	; 0x38
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e2       	ldi	r20, 0x20	; 32
    25ac:	51 e4       	ldi	r21, 0x41	; 65
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	98 ab       	std	Y+48, r25	; 0x30
    25c4:	8f a7       	std	Y+47, r24	; 0x2f
    25c6:	0f c0       	rjmp	.+30     	; 0x25e6 <LCD_sendCommand+0x56a>
    25c8:	89 e1       	ldi	r24, 0x19	; 25
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9e a7       	std	Y+46, r25	; 0x2e
    25ce:	8d a7       	std	Y+45, r24	; 0x2d
    25d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    25d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_sendCommand+0x558>
    25d8:	9e a7       	std	Y+46, r25	; 0x2e
    25da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25de:	98 a9       	ldd	r25, Y+48	; 0x30
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	98 ab       	std	Y+48, r25	; 0x30
    25e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	69 f7       	brne	.-38     	; 0x25c8 <LCD_sendCommand+0x54c>
    25ee:	14 c0       	rjmp	.+40     	; 0x2618 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f0:	69 a9       	ldd	r22, Y+49	; 0x31
    25f2:	7a a9       	ldd	r23, Y+50	; 0x32
    25f4:	8b a9       	ldd	r24, Y+51	; 0x33
    25f6:	9c a9       	ldd	r25, Y+52	; 0x34
    25f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	98 ab       	std	Y+48, r25	; 0x30
    2602:	8f a7       	std	Y+47, r24	; 0x2f
    2604:	8f a5       	ldd	r24, Y+47	; 0x2f
    2606:	98 a9       	ldd	r25, Y+48	; 0x30
    2608:	9c a7       	std	Y+44, r25	; 0x2c
    260a:	8b a7       	std	Y+43, r24	; 0x2b
    260c:	8b a5       	ldd	r24, Y+43	; 0x2b
    260e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <LCD_sendCommand+0x594>
    2614:	9c a7       	std	Y+44, r25	; 0x2c
    2616:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	62 e0       	ldi	r22, 0x02	; 2
    261c:	41 e0       	ldi	r20, 0x01	; 1
    261e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	a0 e8       	ldi	r26, 0x80	; 128
    2628:	bf e3       	ldi	r27, 0x3F	; 63
    262a:	8f a3       	std	Y+39, r24	; 0x27
    262c:	98 a7       	std	Y+40, r25	; 0x28
    262e:	a9 a7       	std	Y+41, r26	; 0x29
    2630:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	6f a1       	ldd	r22, Y+39	; 0x27
    2634:	78 a5       	ldd	r23, Y+40	; 0x28
    2636:	89 a5       	ldd	r24, Y+41	; 0x29
    2638:	9a a5       	ldd	r25, Y+42	; 0x2a
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a e7       	ldi	r20, 0x7A	; 122
    2640:	53 e4       	ldi	r21, 0x43	; 67
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8b a3       	std	Y+35, r24	; 0x23
    264c:	9c a3       	std	Y+36, r25	; 0x24
    264e:	ad a3       	std	Y+37, r26	; 0x25
    2650:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2652:	6b a1       	ldd	r22, Y+35	; 0x23
    2654:	7c a1       	ldd	r23, Y+36	; 0x24
    2656:	8d a1       	ldd	r24, Y+37	; 0x25
    2658:	9e a1       	ldd	r25, Y+38	; 0x26
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9a a3       	std	Y+34, r25	; 0x22
    2670:	89 a3       	std	Y+33, r24	; 0x21
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2674:	6b a1       	ldd	r22, Y+35	; 0x23
    2676:	7c a1       	ldd	r23, Y+36	; 0x24
    2678:	8d a1       	ldd	r24, Y+37	; 0x25
    267a:	9e a1       	ldd	r25, Y+38	; 0x26
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	4c f5       	brge	.+82     	; 0x26de <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	6f a1       	ldd	r22, Y+39	; 0x27
    268e:	78 a5       	ldd	r23, Y+40	; 0x28
    2690:	89 a5       	ldd	r24, Y+41	; 0x29
    2692:	9a a5       	ldd	r25, Y+42	; 0x2a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9a a3       	std	Y+34, r25	; 0x22
    26b2:	89 a3       	std	Y+33, r24	; 0x21
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <LCD_sendCommand+0x658>
    26b6:	89 e1       	ldi	r24, 0x19	; 25
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	98 a3       	std	Y+32, r25	; 0x20
    26bc:	8f 8f       	std	Y+31, r24	; 0x1f
    26be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c0:	98 a1       	ldd	r25, Y+32	; 0x20
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_sendCommand+0x646>
    26c6:	98 a3       	std	Y+32, r25	; 0x20
    26c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	89 a1       	ldd	r24, Y+33	; 0x21
    26cc:	9a a1       	ldd	r25, Y+34	; 0x22
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9a a3       	std	Y+34, r25	; 0x22
    26d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	89 a1       	ldd	r24, Y+33	; 0x21
    26d6:	9a a1       	ldd	r25, Y+34	; 0x22
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <LCD_sendCommand+0x63a>
    26dc:	14 c0       	rjmp	.+40     	; 0x2706 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	6b a1       	ldd	r22, Y+35	; 0x23
    26e0:	7c a1       	ldd	r23, Y+36	; 0x24
    26e2:	8d a1       	ldd	r24, Y+37	; 0x25
    26e4:	9e a1       	ldd	r25, Y+38	; 0x26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9a a3       	std	Y+34, r25	; 0x22
    26f0:	89 a3       	std	Y+33, r24	; 0x21
    26f2:	89 a1       	ldd	r24, Y+33	; 0x21
    26f4:	9a a1       	ldd	r25, Y+34	; 0x22
    26f6:	9e 8f       	std	Y+30, r25	; 0x1e
    26f8:	8d 8f       	std	Y+29, r24	; 0x1d
    26fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_sendCommand+0x682>
    2702:	9e 8f       	std	Y+30, r25	; 0x1e
    2704:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2706:	fe 01       	movw	r30, r28
    2708:	ed 59       	subi	r30, 0x9D	; 157
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	98 2f       	mov	r25, r24
    2710:	91 70       	andi	r25, 0x01	; 1
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	49 2f       	mov	r20, r25
    2718:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    271c:	fe 01       	movw	r30, r28
    271e:	ed 59       	subi	r30, 0x9D	; 157
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	82 70       	andi	r24, 0x02	; 2
    272a:	90 70       	andi	r25, 0x00	; 0
    272c:	95 95       	asr	r25
    272e:	87 95       	ror	r24
    2730:	98 2f       	mov	r25, r24
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	49 2f       	mov	r20, r25
    2738:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    273c:	fe 01       	movw	r30, r28
    273e:	ed 59       	subi	r30, 0x9D	; 157
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	84 70       	andi	r24, 0x04	; 4
    274a:	90 70       	andi	r25, 0x00	; 0
    274c:	95 95       	asr	r25
    274e:	87 95       	ror	r24
    2750:	95 95       	asr	r25
    2752:	87 95       	ror	r24
    2754:	98 2f       	mov	r25, r24
    2756:	82 e0       	ldi	r24, 0x02	; 2
    2758:	62 e0       	ldi	r22, 0x02	; 2
    275a:	49 2f       	mov	r20, r25
    275c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2760:	fe 01       	movw	r30, r28
    2762:	ed 59       	subi	r30, 0x9D	; 157
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	88 70       	andi	r24, 0x08	; 8
    276e:	90 70       	andi	r25, 0x00	; 0
    2770:	95 95       	asr	r25
    2772:	87 95       	ror	r24
    2774:	95 95       	asr	r25
    2776:	87 95       	ror	r24
    2778:	95 95       	asr	r25
    277a:	87 95       	ror	r24
    277c:	98 2f       	mov	r25, r24
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	63 e0       	ldi	r22, 0x03	; 3
    2782:	49 2f       	mov	r20, r25
    2784:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 e8       	ldi	r26, 0x80	; 128
    278e:	bf e3       	ldi	r27, 0x3F	; 63
    2790:	89 8f       	std	Y+25, r24	; 0x19
    2792:	9a 8f       	std	Y+26, r25	; 0x1a
    2794:	ab 8f       	std	Y+27, r26	; 0x1b
    2796:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	69 8d       	ldd	r22, Y+25	; 0x19
    279a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a e7       	ldi	r20, 0x7A	; 122
    27a6:	53 e4       	ldi	r21, 0x43	; 67
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8d 8b       	std	Y+21, r24	; 0x15
    27b2:	9e 8b       	std	Y+22, r25	; 0x16
    27b4:	af 8b       	std	Y+23, r26	; 0x17
    27b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <LCD_sendCommand+0x75e>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	69 8d       	ldd	r22, Y+25	; 0x19
    27f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	0f c0       	rjmp	.+30     	; 0x283a <LCD_sendCommand+0x7be>
    281c:	89 e1       	ldi	r24, 0x19	; 25
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9a 8b       	std	Y+18, r25	; 0x12
    2822:	89 8b       	std	Y+17, r24	; 0x11
    2824:	89 89       	ldd	r24, Y+17	; 0x11
    2826:	9a 89       	ldd	r25, Y+18	; 0x12
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <LCD_sendCommand+0x7ac>
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8b 89       	ldd	r24, Y+19	; 0x13
    2832:	9c 89       	ldd	r25, Y+20	; 0x14
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <LCD_sendCommand+0x7a0>
    2842:	14 c0       	rjmp	.+40     	; 0x286c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9c 8b       	std	Y+20, r25	; 0x14
    2856:	8b 8b       	std	Y+19, r24	; 0x13
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	98 8b       	std	Y+16, r25	; 0x10
    285e:	8f 87       	std	Y+15, r24	; 0x0f
    2860:	8f 85       	ldd	r24, Y+15	; 0x0f
    2862:	98 89       	ldd	r25, Y+16	; 0x10
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_sendCommand+0x7e8>
    2868:	98 8b       	std	Y+16, r25	; 0x10
    286a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	62 e0       	ldi	r22, 0x02	; 2
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a0 e8       	ldi	r26, 0x80	; 128
    287c:	bf e3       	ldi	r27, 0x3F	; 63
    287e:	8b 87       	std	Y+11, r24	; 0x0b
    2880:	9c 87       	std	Y+12, r25	; 0x0c
    2882:	ad 87       	std	Y+13, r26	; 0x0d
    2884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a e7       	ldi	r20, 0x7A	; 122
    2894:	53 e4       	ldi	r21, 0x43	; 67
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8f 83       	std	Y+7, r24	; 0x07
    28a0:	98 87       	std	Y+8, r25	; 0x08
    28a2:	a9 87       	std	Y+9, r26	; 0x09
    28a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a6:	6f 81       	ldd	r22, Y+7	; 0x07
    28a8:	78 85       	ldd	r23, Y+8	; 0x08
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <LCD_sendCommand+0x8ac>
    290a:	89 e1       	ldi	r24, 0x19	; 25
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	9c 81       	ldd	r25, Y+4	; 0x04
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_sendCommand+0x89a>
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <LCD_sendCommand+0x88e>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_sendCommand+0x8d6>
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    295a:	cd 59       	subi	r28, 0x9D	; 157
    295c:	df 4f       	sbci	r29, 0xFF	; 255
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	08 95       	ret

00002972 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	c3 56       	subi	r28, 0x63	; 99
    2980:	d0 40       	sbci	r29, 0x00	; 0
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	fe 01       	movw	r30, r28
    298e:	ed 59       	subi	r30, 0x9D	; 157
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	61 e0       	ldi	r22, 0x01	; 1
    2998:	41 e0       	ldi	r20, 0x01	; 1
    299a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    299e:	fe 01       	movw	r30, r28
    29a0:	e1 5a       	subi	r30, 0xA1	; 161
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a0 e8       	ldi	r26, 0x80	; 128
    29aa:	bf e3       	ldi	r27, 0x3F	; 63
    29ac:	80 83       	st	Z, r24
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	a2 83       	std	Z+2, r26	; 0x02
    29b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b4:	8e 01       	movw	r16, r28
    29b6:	05 5a       	subi	r16, 0xA5	; 165
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	fe 01       	movw	r30, r28
    29bc:	e1 5a       	subi	r30, 0xA1	; 161
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	4a e7       	ldi	r20, 0x7A	; 122
    29ce:	53 e4       	ldi	r21, 0x43	; 67
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	f8 01       	movw	r30, r16
    29da:	80 83       	st	Z, r24
    29dc:	91 83       	std	Z+1, r25	; 0x01
    29de:	a2 83       	std	Z+2, r26	; 0x02
    29e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29e2:	fe 01       	movw	r30, r28
    29e4:	e5 5a       	subi	r30, 0xA5	; 165
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	44 f4       	brge	.+16     	; 0x2a10 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2a00:	fe 01       	movw	r30, r28
    2a02:	e7 5a       	subi	r30, 0xA7	; 167
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	91 83       	std	Z+1, r25	; 0x01
    2a0c:	80 83       	st	Z, r24
    2a0e:	64 c0       	rjmp	.+200    	; 0x2ad8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2a10:	fe 01       	movw	r30, r28
    2a12:	e5 5a       	subi	r30, 0xA5	; 165
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	3f ef       	ldi	r19, 0xFF	; 255
    2a22:	4f e7       	ldi	r20, 0x7F	; 127
    2a24:	57 e4       	ldi	r21, 0x47	; 71
    2a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a2a:	18 16       	cp	r1, r24
    2a2c:	0c f0       	brlt	.+2      	; 0x2a30 <LCD_displayCharacter+0xbe>
    2a2e:	43 c0       	rjmp	.+134    	; 0x2ab6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	fe 01       	movw	r30, r28
    2a32:	e1 5a       	subi	r30, 0xA1	; 161
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8e 01       	movw	r16, r28
    2a50:	07 5a       	subi	r16, 0xA7	; 167
    2a52:	1f 4f       	sbci	r17, 0xFF	; 255
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	f8 01       	movw	r30, r16
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	80 83       	st	Z, r24
    2a66:	1f c0       	rjmp	.+62     	; 0x2aa6 <LCD_displayCharacter+0x134>
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e9 5a       	subi	r30, 0xA9	; 169
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	89 e1       	ldi	r24, 0x19	; 25
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	80 83       	st	Z, r24
    2a76:	fe 01       	movw	r30, r28
    2a78:	e9 5a       	subi	r30, 0xA9	; 169
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_displayCharacter+0x10e>
    2a84:	fe 01       	movw	r30, r28
    2a86:	e9 5a       	subi	r30, 0xA9	; 169
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	de 01       	movw	r26, r28
    2a90:	a7 5a       	subi	r26, 0xA7	; 167
    2a92:	bf 4f       	sbci	r27, 0xFF	; 255
    2a94:	fe 01       	movw	r30, r28
    2a96:	e7 5a       	subi	r30, 0xA7	; 167
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	80 81       	ld	r24, Z
    2a9c:	91 81       	ldd	r25, Z+1	; 0x01
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	11 96       	adiw	r26, 0x01	; 1
    2aa2:	9c 93       	st	X, r25
    2aa4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e7 5a       	subi	r30, 0xA7	; 167
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 81       	ld	r24, Z
    2aae:	91 81       	ldd	r25, Z+1	; 0x01
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	d1 f6       	brne	.-76     	; 0x2a68 <LCD_displayCharacter+0xf6>
    2ab4:	27 c0       	rjmp	.+78     	; 0x2b04 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab6:	8e 01       	movw	r16, r28
    2ab8:	07 5a       	subi	r16, 0xA7	; 167
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
    2abc:	fe 01       	movw	r30, r28
    2abe:	e5 5a       	subi	r30, 0xA5	; 165
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
    2ad8:	de 01       	movw	r26, r28
    2ada:	ab 5a       	subi	r26, 0xAB	; 171
    2adc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e7 5a       	subi	r30, 0xA7	; 167
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	8d 93       	st	X+, r24
    2aea:	9c 93       	st	X, r25
    2aec:	fe 01       	movw	r30, r28
    2aee:	eb 5a       	subi	r30, 0xAB	; 171
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <LCD_displayCharacter+0x184>
    2afa:	fe 01       	movw	r30, r28
    2afc:	eb 5a       	subi	r30, 0xAB	; 171
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	91 83       	std	Z+1, r25	; 0x01
    2b02:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	62 e0       	ldi	r22, 0x02	; 2
    2b08:	41 e0       	ldi	r20, 0x01	; 1
    2b0a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2b0e:	fe 01       	movw	r30, r28
    2b10:	ef 5a       	subi	r30, 0xAF	; 175
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a0 e8       	ldi	r26, 0x80	; 128
    2b1a:	bf e3       	ldi	r27, 0x3F	; 63
    2b1c:	80 83       	st	Z, r24
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	a2 83       	std	Z+2, r26	; 0x02
    2b22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b24:	8e 01       	movw	r16, r28
    2b26:	03 5b       	subi	r16, 0xB3	; 179
    2b28:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ef 5a       	subi	r30, 0xAF	; 175
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	93 81       	ldd	r25, Z+3	; 0x03
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a e7       	ldi	r20, 0x7A	; 122
    2b3e:	53 e4       	ldi	r21, 0x43	; 67
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	f8 01       	movw	r30, r16
    2b4a:	80 83       	st	Z, r24
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	a2 83       	std	Z+2, r26	; 0x02
    2b50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b52:	fe 01       	movw	r30, r28
    2b54:	e3 5b       	subi	r30, 0xB3	; 179
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e8       	ldi	r20, 0x80	; 128
    2b66:	5f e3       	ldi	r21, 0x3F	; 63
    2b68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6c:	88 23       	and	r24, r24
    2b6e:	44 f4       	brge	.+16     	; 0x2b80 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2b70:	fe 01       	movw	r30, r28
    2b72:	e5 5b       	subi	r30, 0xB5	; 181
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	64 c0       	rjmp	.+200    	; 0x2c48 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2b80:	fe 01       	movw	r30, r28
    2b82:	e3 5b       	subi	r30, 0xB3	; 179
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	60 81       	ld	r22, Z
    2b88:	71 81       	ldd	r23, Z+1	; 0x01
    2b8a:	82 81       	ldd	r24, Z+2	; 0x02
    2b8c:	93 81       	ldd	r25, Z+3	; 0x03
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	3f ef       	ldi	r19, 0xFF	; 255
    2b92:	4f e7       	ldi	r20, 0x7F	; 127
    2b94:	57 e4       	ldi	r21, 0x47	; 71
    2b96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9a:	18 16       	cp	r1, r24
    2b9c:	0c f0       	brlt	.+2      	; 0x2ba0 <LCD_displayCharacter+0x22e>
    2b9e:	43 c0       	rjmp	.+134    	; 0x2c26 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ef 5a       	subi	r30, 0xAF	; 175
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 81       	ld	r22, Z
    2ba8:	71 81       	ldd	r23, Z+1	; 0x01
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e2       	ldi	r20, 0x20	; 32
    2bb4:	51 e4       	ldi	r21, 0x41	; 65
    2bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	8e 01       	movw	r16, r28
    2bc0:	05 5b       	subi	r16, 0xB5	; 181
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
    2bd6:	1f c0       	rjmp	.+62     	; 0x2c16 <LCD_displayCharacter+0x2a4>
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e7 5b       	subi	r30, 0xB7	; 183
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	89 e1       	ldi	r24, 0x19	; 25
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	80 83       	st	Z, r24
    2be6:	fe 01       	movw	r30, r28
    2be8:	e7 5b       	subi	r30, 0xB7	; 183
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <LCD_displayCharacter+0x27e>
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e7 5b       	subi	r30, 0xB7	; 183
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfe:	de 01       	movw	r26, r28
    2c00:	a5 5b       	subi	r26, 0xB5	; 181
    2c02:	bf 4f       	sbci	r27, 0xFF	; 255
    2c04:	fe 01       	movw	r30, r28
    2c06:	e5 5b       	subi	r30, 0xB5	; 181
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	11 96       	adiw	r26, 0x01	; 1
    2c12:	9c 93       	st	X, r25
    2c14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c16:	fe 01       	movw	r30, r28
    2c18:	e5 5b       	subi	r30, 0xB5	; 181
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	91 81       	ldd	r25, Z+1	; 0x01
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	d1 f6       	brne	.-76     	; 0x2bd8 <LCD_displayCharacter+0x266>
    2c24:	27 c0       	rjmp	.+78     	; 0x2c74 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c26:	8e 01       	movw	r16, r28
    2c28:	05 5b       	subi	r16, 0xB5	; 181
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e3 5b       	subi	r30, 0xB3	; 179
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	60 81       	ld	r22, Z
    2c34:	71 81       	ldd	r23, Z+1	; 0x01
    2c36:	82 81       	ldd	r24, Z+2	; 0x02
    2c38:	93 81       	ldd	r25, Z+3	; 0x03
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	f8 01       	movw	r30, r16
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	80 83       	st	Z, r24
    2c48:	de 01       	movw	r26, r28
    2c4a:	a9 5b       	subi	r26, 0xB9	; 185
    2c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e5 5b       	subi	r30, 0xB5	; 181
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	8d 93       	st	X+, r24
    2c5a:	9c 93       	st	X, r25
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e9 5b       	subi	r30, 0xB9	; 185
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_displayCharacter+0x2f4>
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e9 5b       	subi	r30, 0xB9	; 185
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2c74:	fe 01       	movw	r30, r28
    2c76:	ed 59       	subi	r30, 0x9D	; 157
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	80 71       	andi	r24, 0x10	; 16
    2c82:	90 70       	andi	r25, 0x00	; 0
    2c84:	95 95       	asr	r25
    2c86:	87 95       	ror	r24
    2c88:	95 95       	asr	r25
    2c8a:	87 95       	ror	r24
    2c8c:	95 95       	asr	r25
    2c8e:	87 95       	ror	r24
    2c90:	95 95       	asr	r25
    2c92:	87 95       	ror	r24
    2c94:	98 2f       	mov	r25, r24
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	60 e0       	ldi	r22, 0x00	; 0
    2c9a:	49 2f       	mov	r20, r25
    2c9c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	ed 59       	subi	r30, 0x9D	; 157
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	80 81       	ld	r24, Z
    2ca8:	88 2f       	mov	r24, r24
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	80 72       	andi	r24, 0x20	; 32
    2cae:	90 70       	andi	r25, 0x00	; 0
    2cb0:	95 95       	asr	r25
    2cb2:	87 95       	ror	r24
    2cb4:	95 95       	asr	r25
    2cb6:	87 95       	ror	r24
    2cb8:	95 95       	asr	r25
    2cba:	87 95       	ror	r24
    2cbc:	95 95       	asr	r25
    2cbe:	87 95       	ror	r24
    2cc0:	95 95       	asr	r25
    2cc2:	87 95       	ror	r24
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	61 e0       	ldi	r22, 0x01	; 1
    2cca:	49 2f       	mov	r20, r25
    2ccc:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	ed 59       	subi	r30, 0x9D	; 157
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	80 74       	andi	r24, 0x40	; 64
    2cde:	90 70       	andi	r25, 0x00	; 0
    2ce0:	08 2e       	mov	r0, r24
    2ce2:	89 2f       	mov	r24, r25
    2ce4:	00 0c       	add	r0, r0
    2ce6:	88 1f       	adc	r24, r24
    2ce8:	99 0b       	sbc	r25, r25
    2cea:	00 0c       	add	r0, r0
    2cec:	88 1f       	adc	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	98 2f       	mov	r25, r24
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	62 e0       	ldi	r22, 0x02	; 2
    2cf6:	49 2f       	mov	r20, r25
    2cf8:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ed 59       	subi	r30, 0x9D	; 157
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	98 2f       	mov	r25, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	99 27       	eor	r25, r25
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	63 e0       	ldi	r22, 0x03	; 3
    2d10:	49 2f       	mov	r20, r25
    2d12:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2d16:	fe 01       	movw	r30, r28
    2d18:	ed 5b       	subi	r30, 0xBD	; 189
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a0 e8       	ldi	r26, 0x80	; 128
    2d22:	bf e3       	ldi	r27, 0x3F	; 63
    2d24:	80 83       	st	Z, r24
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	a2 83       	std	Z+2, r26	; 0x02
    2d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2c:	8e 01       	movw	r16, r28
    2d2e:	01 5c       	subi	r16, 0xC1	; 193
    2d30:	1f 4f       	sbci	r17, 0xFF	; 255
    2d32:	fe 01       	movw	r30, r28
    2d34:	ed 5b       	subi	r30, 0xBD	; 189
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a e7       	ldi	r20, 0x7A	; 122
    2d46:	53 e4       	ldi	r21, 0x43	; 67
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	f8 01       	movw	r30, r16
    2d52:	80 83       	st	Z, r24
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	a2 83       	std	Z+2, r26	; 0x02
    2d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ff 96       	adiw	r30, 0x3f	; 63
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	2c f4       	brge	.+10     	; 0x2d80 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9e af       	std	Y+62, r25	; 0x3e
    2d7c:	8d af       	std	Y+61, r24	; 0x3d
    2d7e:	46 c0       	rjmp	.+140    	; 0x2e0c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2d80:	fe 01       	movw	r30, r28
    2d82:	ff 96       	adiw	r30, 0x3f	; 63
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	64 f5       	brge	.+88     	; 0x2df4 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	ed 5b       	subi	r30, 0xBD	; 189
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e2       	ldi	r20, 0x20	; 32
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	bc 01       	movw	r22, r24
    2dbc:	cd 01       	movw	r24, r26
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9e af       	std	Y+62, r25	; 0x3e
    2dc8:	8d af       	std	Y+61, r24	; 0x3d
    2dca:	0f c0       	rjmp	.+30     	; 0x2dea <LCD_displayCharacter+0x478>
    2dcc:	89 e1       	ldi	r24, 0x19	; 25
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9c af       	std	Y+60, r25	; 0x3c
    2dd2:	8b af       	std	Y+59, r24	; 0x3b
    2dd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dd6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <LCD_displayCharacter+0x466>
    2ddc:	9c af       	std	Y+60, r25	; 0x3c
    2dde:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2de2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	9e af       	std	Y+62, r25	; 0x3e
    2de8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dea:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dec:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	69 f7       	brne	.-38     	; 0x2dcc <LCD_displayCharacter+0x45a>
    2df2:	16 c0       	rjmp	.+44     	; 0x2e20 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df4:	fe 01       	movw	r30, r28
    2df6:	ff 96       	adiw	r30, 0x3f	; 63
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9e af       	std	Y+62, r25	; 0x3e
    2e0a:	8d af       	std	Y+61, r24	; 0x3d
    2e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e10:	9a af       	std	Y+58, r25	; 0x3a
    2e12:	89 af       	std	Y+57, r24	; 0x39
    2e14:	89 ad       	ldd	r24, Y+57	; 0x39
    2e16:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <LCD_displayCharacter+0x4a6>
    2e1c:	9a af       	std	Y+58, r25	; 0x3a
    2e1e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	62 e0       	ldi	r22, 0x02	; 2
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	a0 e8       	ldi	r26, 0x80	; 128
    2e30:	bf e3       	ldi	r27, 0x3F	; 63
    2e32:	8d ab       	std	Y+53, r24	; 0x35
    2e34:	9e ab       	std	Y+54, r25	; 0x36
    2e36:	af ab       	std	Y+55, r26	; 0x37
    2e38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e3c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e3e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e40:	98 ad       	ldd	r25, Y+56	; 0x38
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	4a e7       	ldi	r20, 0x7A	; 122
    2e48:	53 e4       	ldi	r21, 0x43	; 67
    2e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	89 ab       	std	Y+49, r24	; 0x31
    2e54:	9a ab       	std	Y+50, r25	; 0x32
    2e56:	ab ab       	std	Y+51, r26	; 0x33
    2e58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e60:	9c a9       	ldd	r25, Y+52	; 0x34
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e8       	ldi	r20, 0x80	; 128
    2e68:	5f e3       	ldi	r21, 0x3F	; 63
    2e6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e6e:	88 23       	and	r24, r24
    2e70:	2c f4       	brge	.+10     	; 0x2e7c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	98 ab       	std	Y+48, r25	; 0x30
    2e78:	8f a7       	std	Y+47, r24	; 0x2f
    2e7a:	3f c0       	rjmp	.+126    	; 0x2efa <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2e7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e80:	8b a9       	ldd	r24, Y+51	; 0x33
    2e82:	9c a9       	ldd	r25, Y+52	; 0x34
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	3f ef       	ldi	r19, 0xFF	; 255
    2e88:	4f e7       	ldi	r20, 0x7F	; 127
    2e8a:	57 e4       	ldi	r21, 0x47	; 71
    2e8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e90:	18 16       	cp	r1, r24
    2e92:	4c f5       	brge	.+82     	; 0x2ee6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e94:	6d a9       	ldd	r22, Y+53	; 0x35
    2e96:	7e a9       	ldd	r23, Y+54	; 0x36
    2e98:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	51 e4       	ldi	r21, 0x41	; 65
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	98 ab       	std	Y+48, r25	; 0x30
    2eba:	8f a7       	std	Y+47, r24	; 0x2f
    2ebc:	0f c0       	rjmp	.+30     	; 0x2edc <LCD_displayCharacter+0x56a>
    2ebe:	89 e1       	ldi	r24, 0x19	; 25
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9e a7       	std	Y+46, r25	; 0x2e
    2ec4:	8d a7       	std	Y+45, r24	; 0x2d
    2ec6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ec8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <LCD_displayCharacter+0x558>
    2ece:	9e a7       	std	Y+46, r25	; 0x2e
    2ed0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	98 ab       	std	Y+48, r25	; 0x30
    2eda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ede:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	69 f7       	brne	.-38     	; 0x2ebe <LCD_displayCharacter+0x54c>
    2ee4:	14 c0       	rjmp	.+40     	; 0x2f0e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ee8:	7a a9       	ldd	r23, Y+50	; 0x32
    2eea:	8b a9       	ldd	r24, Y+51	; 0x33
    2eec:	9c a9       	ldd	r25, Y+52	; 0x34
    2eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	98 ab       	std	Y+48, r25	; 0x30
    2ef8:	8f a7       	std	Y+47, r24	; 0x2f
    2efa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2efc:	98 a9       	ldd	r25, Y+48	; 0x30
    2efe:	9c a7       	std	Y+44, r25	; 0x2c
    2f00:	8b a7       	std	Y+43, r24	; 0x2b
    2f02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <LCD_displayCharacter+0x594>
    2f0a:	9c a7       	std	Y+44, r25	; 0x2c
    2f0c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	62 e0       	ldi	r22, 0x02	; 2
    2f12:	41 e0       	ldi	r20, 0x01	; 1
    2f14:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	a0 e8       	ldi	r26, 0x80	; 128
    2f1e:	bf e3       	ldi	r27, 0x3F	; 63
    2f20:	8f a3       	std	Y+39, r24	; 0x27
    2f22:	98 a7       	std	Y+40, r25	; 0x28
    2f24:	a9 a7       	std	Y+41, r26	; 0x29
    2f26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f28:	6f a1       	ldd	r22, Y+39	; 0x27
    2f2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	4a e7       	ldi	r20, 0x7A	; 122
    2f36:	53 e4       	ldi	r21, 0x43	; 67
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	8b a3       	std	Y+35, r24	; 0x23
    2f42:	9c a3       	std	Y+36, r25	; 0x24
    2f44:	ad a3       	std	Y+37, r26	; 0x25
    2f46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f48:	6b a1       	ldd	r22, Y+35	; 0x23
    2f4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e8       	ldi	r20, 0x80	; 128
    2f56:	5f e3       	ldi	r21, 0x3F	; 63
    2f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5c:	88 23       	and	r24, r24
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9a a3       	std	Y+34, r25	; 0x22
    2f66:	89 a3       	std	Y+33, r24	; 0x21
    2f68:	3f c0       	rjmp	.+126    	; 0x2fe8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2f6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f70:	9e a1       	ldd	r25, Y+38	; 0x26
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	3f ef       	ldi	r19, 0xFF	; 255
    2f76:	4f e7       	ldi	r20, 0x7F	; 127
    2f78:	57 e4       	ldi	r21, 0x47	; 71
    2f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	4c f5       	brge	.+82     	; 0x2fd4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f82:	6f a1       	ldd	r22, Y+39	; 0x27
    2f84:	78 a5       	ldd	r23, Y+40	; 0x28
    2f86:	89 a5       	ldd	r24, Y+41	; 0x29
    2f88:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e2       	ldi	r20, 0x20	; 32
    2f90:	51 e4       	ldi	r21, 0x41	; 65
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9a a3       	std	Y+34, r25	; 0x22
    2fa8:	89 a3       	std	Y+33, r24	; 0x21
    2faa:	0f c0       	rjmp	.+30     	; 0x2fca <LCD_displayCharacter+0x658>
    2fac:	89 e1       	ldi	r24, 0x19	; 25
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	98 a3       	std	Y+32, r25	; 0x20
    2fb2:	8f 8f       	std	Y+31, r24	; 0x1f
    2fb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fb6:	98 a1       	ldd	r25, Y+32	; 0x20
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <LCD_displayCharacter+0x646>
    2fbc:	98 a3       	std	Y+32, r25	; 0x20
    2fbe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	9a a3       	std	Y+34, r25	; 0x22
    2fc8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fca:	89 a1       	ldd	r24, Y+33	; 0x21
    2fcc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	69 f7       	brne	.-38     	; 0x2fac <LCD_displayCharacter+0x63a>
    2fd2:	14 c0       	rjmp	.+40     	; 0x2ffc <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fda:	9e a1       	ldd	r25, Y+38	; 0x26
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9a a3       	std	Y+34, r25	; 0x22
    2fe6:	89 a3       	std	Y+33, r24	; 0x21
    2fe8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fea:	9a a1       	ldd	r25, Y+34	; 0x22
    2fec:	9e 8f       	std	Y+30, r25	; 0x1e
    2fee:	8d 8f       	std	Y+29, r24	; 0x1d
    2ff0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ff2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_displayCharacter+0x682>
    2ff8:	9e 8f       	std	Y+30, r25	; 0x1e
    2ffa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	ed 59       	subi	r30, 0x9D	; 157
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	80 81       	ld	r24, Z
    3004:	98 2f       	mov	r25, r24
    3006:	91 70       	andi	r25, 0x01	; 1
    3008:	82 e0       	ldi	r24, 0x02	; 2
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	49 2f       	mov	r20, r25
    300e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3012:	fe 01       	movw	r30, r28
    3014:	ed 59       	subi	r30, 0x9D	; 157
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	80 81       	ld	r24, Z
    301a:	88 2f       	mov	r24, r24
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	82 70       	andi	r24, 0x02	; 2
    3020:	90 70       	andi	r25, 0x00	; 0
    3022:	95 95       	asr	r25
    3024:	87 95       	ror	r24
    3026:	98 2f       	mov	r25, r24
    3028:	82 e0       	ldi	r24, 0x02	; 2
    302a:	61 e0       	ldi	r22, 0x01	; 1
    302c:	49 2f       	mov	r20, r25
    302e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3032:	fe 01       	movw	r30, r28
    3034:	ed 59       	subi	r30, 0x9D	; 157
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	88 2f       	mov	r24, r24
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	84 70       	andi	r24, 0x04	; 4
    3040:	90 70       	andi	r25, 0x00	; 0
    3042:	95 95       	asr	r25
    3044:	87 95       	ror	r24
    3046:	95 95       	asr	r25
    3048:	87 95       	ror	r24
    304a:	98 2f       	mov	r25, r24
    304c:	82 e0       	ldi	r24, 0x02	; 2
    304e:	62 e0       	ldi	r22, 0x02	; 2
    3050:	49 2f       	mov	r20, r25
    3052:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3056:	fe 01       	movw	r30, r28
    3058:	ed 59       	subi	r30, 0x9D	; 157
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	88 2f       	mov	r24, r24
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	88 70       	andi	r24, 0x08	; 8
    3064:	90 70       	andi	r25, 0x00	; 0
    3066:	95 95       	asr	r25
    3068:	87 95       	ror	r24
    306a:	95 95       	asr	r25
    306c:	87 95       	ror	r24
    306e:	95 95       	asr	r25
    3070:	87 95       	ror	r24
    3072:	98 2f       	mov	r25, r24
    3074:	82 e0       	ldi	r24, 0x02	; 2
    3076:	63 e0       	ldi	r22, 0x03	; 3
    3078:	49 2f       	mov	r20, r25
    307a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a0 e8       	ldi	r26, 0x80	; 128
    3084:	bf e3       	ldi	r27, 0x3F	; 63
    3086:	89 8f       	std	Y+25, r24	; 0x19
    3088:	9a 8f       	std	Y+26, r25	; 0x1a
    308a:	ab 8f       	std	Y+27, r26	; 0x1b
    308c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308e:	69 8d       	ldd	r22, Y+25	; 0x19
    3090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	4a e7       	ldi	r20, 0x7A	; 122
    309c:	53 e4       	ldi	r21, 0x43	; 67
    309e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	8d 8b       	std	Y+21, r24	; 0x15
    30a8:	9e 8b       	std	Y+22, r25	; 0x16
    30aa:	af 8b       	std	Y+23, r26	; 0x17
    30ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30ae:	6d 89       	ldd	r22, Y+21	; 0x15
    30b0:	7e 89       	ldd	r23, Y+22	; 0x16
    30b2:	8f 89       	ldd	r24, Y+23	; 0x17
    30b4:	98 8d       	ldd	r25, Y+24	; 0x18
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e8       	ldi	r20, 0x80	; 128
    30bc:	5f e3       	ldi	r21, 0x3F	; 63
    30be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c2:	88 23       	and	r24, r24
    30c4:	2c f4       	brge	.+10     	; 0x30d0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	9c 8b       	std	Y+20, r25	; 0x14
    30cc:	8b 8b       	std	Y+19, r24	; 0x13
    30ce:	3f c0       	rjmp	.+126    	; 0x314e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    30d0:	6d 89       	ldd	r22, Y+21	; 0x15
    30d2:	7e 89       	ldd	r23, Y+22	; 0x16
    30d4:	8f 89       	ldd	r24, Y+23	; 0x17
    30d6:	98 8d       	ldd	r25, Y+24	; 0x18
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	3f ef       	ldi	r19, 0xFF	; 255
    30dc:	4f e7       	ldi	r20, 0x7F	; 127
    30de:	57 e4       	ldi	r21, 0x47	; 71
    30e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e4:	18 16       	cp	r1, r24
    30e6:	4c f5       	brge	.+82     	; 0x313a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e8:	69 8d       	ldd	r22, Y+25	; 0x19
    30ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e2       	ldi	r20, 0x20	; 32
    30f6:	51 e4       	ldi	r21, 0x41	; 65
    30f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9c 8b       	std	Y+20, r25	; 0x14
    310e:	8b 8b       	std	Y+19, r24	; 0x13
    3110:	0f c0       	rjmp	.+30     	; 0x3130 <LCD_displayCharacter+0x7be>
    3112:	89 e1       	ldi	r24, 0x19	; 25
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	9a 8b       	std	Y+18, r25	; 0x12
    3118:	89 8b       	std	Y+17, r24	; 0x11
    311a:	89 89       	ldd	r24, Y+17	; 0x11
    311c:	9a 89       	ldd	r25, Y+18	; 0x12
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <LCD_displayCharacter+0x7ac>
    3122:	9a 8b       	std	Y+18, r25	; 0x12
    3124:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3126:	8b 89       	ldd	r24, Y+19	; 0x13
    3128:	9c 89       	ldd	r25, Y+20	; 0x14
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	9c 8b       	std	Y+20, r25	; 0x14
    312e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3130:	8b 89       	ldd	r24, Y+19	; 0x13
    3132:	9c 89       	ldd	r25, Y+20	; 0x14
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	69 f7       	brne	.-38     	; 0x3112 <LCD_displayCharacter+0x7a0>
    3138:	14 c0       	rjmp	.+40     	; 0x3162 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313a:	6d 89       	ldd	r22, Y+21	; 0x15
    313c:	7e 89       	ldd	r23, Y+22	; 0x16
    313e:	8f 89       	ldd	r24, Y+23	; 0x17
    3140:	98 8d       	ldd	r25, Y+24	; 0x18
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9c 8b       	std	Y+20, r25	; 0x14
    314c:	8b 8b       	std	Y+19, r24	; 0x13
    314e:	8b 89       	ldd	r24, Y+19	; 0x13
    3150:	9c 89       	ldd	r25, Y+20	; 0x14
    3152:	98 8b       	std	Y+16, r25	; 0x10
    3154:	8f 87       	std	Y+15, r24	; 0x0f
    3156:	8f 85       	ldd	r24, Y+15	; 0x0f
    3158:	98 89       	ldd	r25, Y+16	; 0x10
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <LCD_displayCharacter+0x7e8>
    315e:	98 8b       	std	Y+16, r25	; 0x10
    3160:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	62 e0       	ldi	r22, 0x02	; 2
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a0 e8       	ldi	r26, 0x80	; 128
    3172:	bf e3       	ldi	r27, 0x3F	; 63
    3174:	8b 87       	std	Y+11, r24	; 0x0b
    3176:	9c 87       	std	Y+12, r25	; 0x0c
    3178:	ad 87       	std	Y+13, r26	; 0x0d
    317a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317c:	6b 85       	ldd	r22, Y+11	; 0x0b
    317e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3180:	8d 85       	ldd	r24, Y+13	; 0x0d
    3182:	9e 85       	ldd	r25, Y+14	; 0x0e
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4a e7       	ldi	r20, 0x7A	; 122
    318a:	53 e4       	ldi	r21, 0x43	; 67
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	8f 83       	std	Y+7, r24	; 0x07
    3196:	98 87       	std	Y+8, r25	; 0x08
    3198:	a9 87       	std	Y+9, r26	; 0x09
    319a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    319c:	6f 81       	ldd	r22, Y+7	; 0x07
    319e:	78 85       	ldd	r23, Y+8	; 0x08
    31a0:	89 85       	ldd	r24, Y+9	; 0x09
    31a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e8       	ldi	r20, 0x80	; 128
    31aa:	5f e3       	ldi	r21, 0x3F	; 63
    31ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31b0:	88 23       	and	r24, r24
    31b2:	2c f4       	brge	.+10     	; 0x31be <LCD_displayCharacter+0x84c>
		__ticks = 1;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	3f c0       	rjmp	.+126    	; 0x323c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    31be:	6f 81       	ldd	r22, Y+7	; 0x07
    31c0:	78 85       	ldd	r23, Y+8	; 0x08
    31c2:	89 85       	ldd	r24, Y+9	; 0x09
    31c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	3f ef       	ldi	r19, 0xFF	; 255
    31ca:	4f e7       	ldi	r20, 0x7F	; 127
    31cc:	57 e4       	ldi	r21, 0x47	; 71
    31ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31d2:	18 16       	cp	r1, r24
    31d4:	4c f5       	brge	.+82     	; 0x3228 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31da:	8d 85       	ldd	r24, Y+13	; 0x0d
    31dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e2       	ldi	r20, 0x20	; 32
    31e4:	51 e4       	ldi	r21, 0x41	; 65
    31e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <LCD_displayCharacter+0x8ac>
    3200:	89 e1       	ldi	r24, 0x19	; 25
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9c 83       	std	Y+4, r25	; 0x04
    3206:	8b 83       	std	Y+3, r24	; 0x03
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	9c 81       	ldd	r25, Y+4	; 0x04
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <LCD_displayCharacter+0x89a>
    3210:	9c 83       	std	Y+4, r25	; 0x04
    3212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	9e 83       	std	Y+6, r25	; 0x06
    321c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	69 f7       	brne	.-38     	; 0x3200 <LCD_displayCharacter+0x88e>
    3226:	14 c0       	rjmp	.+40     	; 0x3250 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3228:	6f 81       	ldd	r22, Y+7	; 0x07
    322a:	78 85       	ldd	r23, Y+8	; 0x08
    322c:	89 85       	ldd	r24, Y+9	; 0x09
    322e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9e 83       	std	Y+6, r25	; 0x06
    323a:	8d 83       	std	Y+5, r24	; 0x05
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	9a 81       	ldd	r25, Y+2	; 0x02
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <LCD_displayCharacter+0x8d6>
    324c:	9a 83       	std	Y+2, r25	; 0x02
    324e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3250:	cd 59       	subi	r28, 0x9D	; 157
    3252:	df 4f       	sbci	r29, 0xFF	; 255
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	08 95       	ret

00003268 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	00 d0       	rcall	.+0      	; 0x326e <LCD_displayString+0x6>
    326e:	0f 92       	push	r0
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	9b 83       	std	Y+3, r25	; 0x03
    3276:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3278:	19 82       	std	Y+1, r1	; 0x01
    327a:	0e c0       	rjmp	.+28     	; 0x3298 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	9b 81       	ldd	r25, Y+3	; 0x03
    3286:	fc 01       	movw	r30, r24
    3288:	e2 0f       	add	r30, r18
    328a:	f3 1f       	adc	r31, r19
    328c:	80 81       	ld	r24, Z
    328e:	0e 94 b9 14 	call	0x2972	; 0x2972 <LCD_displayCharacter>
		i++;
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	8f 5f       	subi	r24, 0xFF	; 255
    3296:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	9b 81       	ldd	r25, Y+3	; 0x03
    32a2:	fc 01       	movw	r30, r24
    32a4:	e2 0f       	add	r30, r18
    32a6:	f3 1f       	adc	r31, r19
    32a8:	80 81       	ld	r24, Z
    32aa:	88 23       	and	r24, r24
    32ac:	39 f7       	brne	.-50     	; 0x327c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	08 95       	ret

000032ba <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	00 d0       	rcall	.+0      	; 0x32c0 <LCD_moveCursor+0x6>
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <LCD_moveCursor+0x8>
    32c2:	0f 92       	push	r0
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	8a 83       	std	Y+2, r24	; 0x02
    32ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	3d 83       	std	Y+5, r19	; 0x05
    32d4:	2c 83       	std	Y+4, r18	; 0x04
    32d6:	8c 81       	ldd	r24, Y+4	; 0x04
    32d8:	9d 81       	ldd	r25, Y+5	; 0x05
    32da:	81 30       	cpi	r24, 0x01	; 1
    32dc:	91 05       	cpc	r25, r1
    32de:	c1 f0       	breq	.+48     	; 0x3310 <LCD_moveCursor+0x56>
    32e0:	2c 81       	ldd	r18, Y+4	; 0x04
    32e2:	3d 81       	ldd	r19, Y+5	; 0x05
    32e4:	22 30       	cpi	r18, 0x02	; 2
    32e6:	31 05       	cpc	r19, r1
    32e8:	2c f4       	brge	.+10     	; 0x32f4 <LCD_moveCursor+0x3a>
    32ea:	8c 81       	ldd	r24, Y+4	; 0x04
    32ec:	9d 81       	ldd	r25, Y+5	; 0x05
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	61 f0       	breq	.+24     	; 0x330a <LCD_moveCursor+0x50>
    32f2:	19 c0       	rjmp	.+50     	; 0x3326 <LCD_moveCursor+0x6c>
    32f4:	2c 81       	ldd	r18, Y+4	; 0x04
    32f6:	3d 81       	ldd	r19, Y+5	; 0x05
    32f8:	22 30       	cpi	r18, 0x02	; 2
    32fa:	31 05       	cpc	r19, r1
    32fc:	69 f0       	breq	.+26     	; 0x3318 <LCD_moveCursor+0x5e>
    32fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3300:	9d 81       	ldd	r25, Y+5	; 0x05
    3302:	83 30       	cpi	r24, 0x03	; 3
    3304:	91 05       	cpc	r25, r1
    3306:	61 f0       	breq	.+24     	; 0x3320 <LCD_moveCursor+0x66>
    3308:	0e c0       	rjmp	.+28     	; 0x3326 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    330a:	8b 81       	ldd	r24, Y+3	; 0x03
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	0b c0       	rjmp	.+22     	; 0x3326 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    3310:	8b 81       	ldd	r24, Y+3	; 0x03
    3312:	80 5c       	subi	r24, 0xC0	; 192
    3314:	89 83       	std	Y+1, r24	; 0x01
    3316:	07 c0       	rjmp	.+14     	; 0x3326 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    3318:	8b 81       	ldd	r24, Y+3	; 0x03
    331a:	80 5f       	subi	r24, 0xF0	; 240
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	03 c0       	rjmp	.+6      	; 0x3326 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    3320:	8b 81       	ldd	r24, Y+3	; 0x03
    3322:	80 5b       	subi	r24, 0xB0	; 176
    3324:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	80 68       	ori	r24, 0x80	; 128
    332a:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
}
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	00 d0       	rcall	.+0      	; 0x3344 <LCD_displayStringRowColumn+0x6>
    3344:	00 d0       	rcall	.+0      	; 0x3346 <LCD_displayStringRowColumn+0x8>
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	6a 83       	std	Y+2, r22	; 0x02
    334e:	5c 83       	std	Y+4, r21	; 0x04
    3350:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	6a 81       	ldd	r22, Y+2	; 0x02
    3356:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	9c 81       	ldd	r25, Y+4	; 0x04
    335e:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_displayString>
}
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	62 97       	sbiw	r28, 0x12	; 18
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	9a 8b       	std	Y+18, r25	; 0x12
    3386:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3388:	89 89       	ldd	r24, Y+17	; 0x11
    338a:	9a 89       	ldd	r25, Y+18	; 0x12
    338c:	9e 01       	movw	r18, r28
    338e:	2f 5f       	subi	r18, 0xFF	; 255
    3390:	3f 4f       	sbci	r19, 0xFF	; 255
    3392:	b9 01       	movw	r22, r18
    3394:	4a e0       	ldi	r20, 0x0A	; 10
    3396:	50 e0       	ldi	r21, 0x00	; 0
    3398:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <itoa>
	LCD_displayString(buff); /* Display the string */
    339c:	ce 01       	movw	r24, r28
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_displayString>
}
    33a4:	62 96       	adiw	r28, 0x12	; 18
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	08 95       	ret

000033b6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
}
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <__vector_7>:
/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/******************Call back function for compare mode************************/
ISR (TIMER1_COMPA_vect)
{
    33ca:	1f 92       	push	r1
    33cc:	0f 92       	push	r0
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	0f 92       	push	r0
    33d2:	11 24       	eor	r1, r1
    33d4:	2f 93       	push	r18
    33d6:	3f 93       	push	r19
    33d8:	4f 93       	push	r20
    33da:	5f 93       	push	r21
    33dc:	6f 93       	push	r22
    33de:	7f 93       	push	r23
    33e0:	8f 93       	push	r24
    33e2:	9f 93       	push	r25
    33e4:	af 93       	push	r26
    33e6:	bf 93       	push	r27
    33e8:	ef 93       	push	r30
    33ea:	ff 93       	push	r31
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    33f4:	80 91 eb 00 	lds	r24, 0x00EB
    33f8:	90 91 ec 00 	lds	r25, 0x00EC
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	29 f0       	breq	.+10     	; 0x340a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3400:	e0 91 eb 00 	lds	r30, 0x00EB
    3404:	f0 91 ec 00 	lds	r31, 0x00EC
    3408:	09 95       	icall
	}
}
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	ff 91       	pop	r31
    3410:	ef 91       	pop	r30
    3412:	bf 91       	pop	r27
    3414:	af 91       	pop	r26
    3416:	9f 91       	pop	r25
    3418:	8f 91       	pop	r24
    341a:	7f 91       	pop	r23
    341c:	6f 91       	pop	r22
    341e:	5f 91       	pop	r21
    3420:	4f 91       	pop	r20
    3422:	3f 91       	pop	r19
    3424:	2f 91       	pop	r18
    3426:	0f 90       	pop	r0
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	0f 90       	pop	r0
    342c:	1f 90       	pop	r1
    342e:	18 95       	reti

00003430 <__vector_9>:

/******************Call back function for normal mode************************/
ISR (TIMER1_OVF_vect)
{
    3430:	1f 92       	push	r1
    3432:	0f 92       	push	r0
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	0f 92       	push	r0
    3438:	11 24       	eor	r1, r1
    343a:	2f 93       	push	r18
    343c:	3f 93       	push	r19
    343e:	4f 93       	push	r20
    3440:	5f 93       	push	r21
    3442:	6f 93       	push	r22
    3444:	7f 93       	push	r23
    3446:	8f 93       	push	r24
    3448:	9f 93       	push	r25
    344a:	af 93       	push	r26
    344c:	bf 93       	push	r27
    344e:	ef 93       	push	r30
    3450:	ff 93       	push	r31
    3452:	df 93       	push	r29
    3454:	cf 93       	push	r28
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    345a:	80 91 eb 00 	lds	r24, 0x00EB
    345e:	90 91 ec 00 	lds	r25, 0x00EC
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	29 f0       	breq	.+10     	; 0x3470 <__vector_9+0x40>
	{

		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3466:	e0 91 eb 00 	lds	r30, 0x00EB
    346a:	f0 91 ec 00 	lds	r31, 0x00EC
    346e:	09 95       	icall
	}
}
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	ff 91       	pop	r31
    3476:	ef 91       	pop	r30
    3478:	bf 91       	pop	r27
    347a:	af 91       	pop	r26
    347c:	9f 91       	pop	r25
    347e:	8f 91       	pop	r24
    3480:	7f 91       	pop	r23
    3482:	6f 91       	pop	r22
    3484:	5f 91       	pop	r21
    3486:	4f 91       	pop	r20
    3488:	3f 91       	pop	r19
    348a:	2f 91       	pop	r18
    348c:	0f 90       	pop	r0
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	0f 90       	pop	r0
    3492:	1f 90       	pop	r1
    3494:	18 95       	reti

00003496 <Timer1_init>:


void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <Timer1_init+0xa>
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <Timer1_init+0xc>
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	9a 83       	std	Y+2, r25	; 0x02
    34a8:	89 83       	std	Y+1, r24	; 0x01

/************************Mode selection*********************************/

	TCCR1A = ((Config_Ptr->mode)&0b0011)<<WGM10;
    34aa:	af e4       	ldi	r26, 0x4F	; 79
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	e9 81       	ldd	r30, Y+1	; 0x01
    34b0:	fa 81       	ldd	r31, Y+2	; 0x02
    34b2:	85 81       	ldd	r24, Z+5	; 0x05
    34b4:	83 70       	andi	r24, 0x03	; 3
    34b6:	8c 93       	st	X, r24
	TCCR1B = ((Config_Ptr->mode)&0b1100)<<WGM12;
    34b8:	ae e4       	ldi	r26, 0x4E	; 78
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	e9 81       	ldd	r30, Y+1	; 0x01
    34be:	fa 81       	ldd	r31, Y+2	; 0x02
    34c0:	85 81       	ldd	r24, Z+5	; 0x05
    34c2:	8c 70       	andi	r24, 0x0C	; 12
    34c4:	88 0f       	add	r24, r24
    34c6:	88 0f       	add	r24, r24
    34c8:	88 0f       	add	r24, r24
    34ca:	8c 93       	st	X, r24
	TCCR1A|=(Config_Ptr->mode_functionality)<<COM1A0;
    34cc:	af e4       	ldi	r26, 0x4F	; 79
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	ef e4       	ldi	r30, 0x4F	; 79
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	28 2f       	mov	r18, r24
    34d8:	e9 81       	ldd	r30, Y+1	; 0x01
    34da:	fa 81       	ldd	r31, Y+2	; 0x02
    34dc:	86 81       	ldd	r24, Z+6	; 0x06
    34de:	88 2f       	mov	r24, r24
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	00 24       	eor	r0, r0
    34e4:	96 95       	lsr	r25
    34e6:	87 95       	ror	r24
    34e8:	07 94       	ror	r0
    34ea:	96 95       	lsr	r25
    34ec:	87 95       	ror	r24
    34ee:	07 94       	ror	r0
    34f0:	98 2f       	mov	r25, r24
    34f2:	80 2d       	mov	r24, r0
    34f4:	82 2b       	or	r24, r18
    34f6:	8c 93       	st	X, r24

/**************************Pre_scaler*******************************/

	TCCR1B|=Config_Ptr->prescaler;
    34f8:	ae e4       	ldi	r26, 0x4E	; 78
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	ee e4       	ldi	r30, 0x4E	; 78
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	90 81       	ld	r25, Z
    3502:	e9 81       	ldd	r30, Y+1	; 0x01
    3504:	fa 81       	ldd	r31, Y+2	; 0x02
    3506:	84 81       	ldd	r24, Z+4	; 0x04
    3508:	89 2b       	or	r24, r25
    350a:	8c 93       	st	X, r24

/*************************Initial values*****************************/

	TCNT1=Config_Ptr->initial_value;
    350c:	ac e4       	ldi	r26, 0x4C	; 76
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	e9 81       	ldd	r30, Y+1	; 0x01
    3512:	fa 81       	ldd	r31, Y+2	; 0x02
    3514:	80 81       	ld	r24, Z
    3516:	91 81       	ldd	r25, Z+1	; 0x01
    3518:	11 96       	adiw	r26, 0x01	; 1
    351a:	9c 93       	st	X, r25
    351c:	8e 93       	st	-X, r24

/* OCR1A value = F_CPU/pre_scaler= number of times needed to reach 1 second
   then * compare value (Number of seconds you want to compare with)        */

	switch(Config_Ptr->prescaler){
    351e:	e9 81       	ldd	r30, Y+1	; 0x01
    3520:	fa 81       	ldd	r31, Y+2	; 0x02
    3522:	84 81       	ldd	r24, Z+4	; 0x04
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	3c 83       	std	Y+4, r19	; 0x04
    352a:	2b 83       	std	Y+3, r18	; 0x03
    352c:	4b 81       	ldd	r20, Y+3	; 0x03
    352e:	5c 81       	ldd	r21, Y+4	; 0x04
    3530:	43 30       	cpi	r20, 0x03	; 3
    3532:	51 05       	cpc	r21, r1
    3534:	09 f4       	brne	.+2      	; 0x3538 <Timer1_init+0xa2>
    3536:	48 c0       	rjmp	.+144    	; 0x35c8 <Timer1_init+0x132>
    3538:	8b 81       	ldd	r24, Y+3	; 0x03
    353a:	9c 81       	ldd	r25, Y+4	; 0x04
    353c:	84 30       	cpi	r24, 0x04	; 4
    353e:	91 05       	cpc	r25, r1
    3540:	5c f4       	brge	.+22     	; 0x3558 <Timer1_init+0xc2>
    3542:	eb 81       	ldd	r30, Y+3	; 0x03
    3544:	fc 81       	ldd	r31, Y+4	; 0x04
    3546:	e1 30       	cpi	r30, 0x01	; 1
    3548:	f1 05       	cpc	r31, r1
    354a:	99 f0       	breq	.+38     	; 0x3572 <Timer1_init+0xdc>
    354c:	2b 81       	ldd	r18, Y+3	; 0x03
    354e:	3c 81       	ldd	r19, Y+4	; 0x04
    3550:	22 30       	cpi	r18, 0x02	; 2
    3552:	31 05       	cpc	r19, r1
    3554:	29 f1       	breq	.+74     	; 0x35a0 <Timer1_init+0x10a>
    3556:	73 c0       	rjmp	.+230    	; 0x363e <Timer1_init+0x1a8>
    3558:	4b 81       	ldd	r20, Y+3	; 0x03
    355a:	5c 81       	ldd	r21, Y+4	; 0x04
    355c:	44 30       	cpi	r20, 0x04	; 4
    355e:	51 05       	cpc	r21, r1
    3560:	09 f4       	brne	.+2      	; 0x3564 <Timer1_init+0xce>
    3562:	46 c0       	rjmp	.+140    	; 0x35f0 <Timer1_init+0x15a>
    3564:	8b 81       	ldd	r24, Y+3	; 0x03
    3566:	9c 81       	ldd	r25, Y+4	; 0x04
    3568:	85 30       	cpi	r24, 0x05	; 5
    356a:	91 05       	cpc	r25, r1
    356c:	09 f4       	brne	.+2      	; 0x3570 <Timer1_init+0xda>
    356e:	54 c0       	rjmp	.+168    	; 0x3618 <Timer1_init+0x182>
    3570:	66 c0       	rjmp	.+204    	; 0x363e <Timer1_init+0x1a8>
	case Pre_1:OCR1A=(F_CPU/1)*(Config_Ptr->compare_value);
    3572:	0a e4       	ldi	r16, 0x4A	; 74
    3574:	10 e0       	ldi	r17, 0x00	; 0
    3576:	e9 81       	ldd	r30, Y+1	; 0x01
    3578:	fa 81       	ldd	r31, Y+2	; 0x02
    357a:	82 81       	ldd	r24, Z+2	; 0x02
    357c:	93 81       	ldd	r25, Z+3	; 0x03
    357e:	cc 01       	movw	r24, r24
    3580:	a0 e0       	ldi	r26, 0x00	; 0
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	20 e4       	ldi	r18, 0x40	; 64
    3586:	32 e4       	ldi	r19, 0x42	; 66
    3588:	4f e0       	ldi	r20, 0x0F	; 15
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	bc 01       	movw	r22, r24
    358e:	cd 01       	movw	r24, r26
    3590:	0e 94 a6 1c 	call	0x394c	; 0x394c <__mulsi3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	f8 01       	movw	r30, r16
    359a:	91 83       	std	Z+1, r25	; 0x01
    359c:	80 83       	st	Z, r24
    359e:	4f c0       	rjmp	.+158    	; 0x363e <Timer1_init+0x1a8>
	break;
	case Pre_8:OCR1A=(uint16)(F_CPU/8)*(Config_Ptr->compare_value);
    35a0:	aa e4       	ldi	r26, 0x4A	; 74
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e9 81       	ldd	r30, Y+1	; 0x01
    35a6:	fa 81       	ldd	r31, Y+2	; 0x02
    35a8:	22 81       	ldd	r18, Z+2	; 0x02
    35aa:	33 81       	ldd	r19, Z+3	; 0x03
    35ac:	88 e4       	ldi	r24, 0x48	; 72
    35ae:	98 ee       	ldi	r25, 0xE8	; 232
    35b0:	ac 01       	movw	r20, r24
    35b2:	24 9f       	mul	r18, r20
    35b4:	c0 01       	movw	r24, r0
    35b6:	25 9f       	mul	r18, r21
    35b8:	90 0d       	add	r25, r0
    35ba:	34 9f       	mul	r19, r20
    35bc:	90 0d       	add	r25, r0
    35be:	11 24       	eor	r1, r1
    35c0:	11 96       	adiw	r26, 0x01	; 1
    35c2:	9c 93       	st	X, r25
    35c4:	8e 93       	st	-X, r24
    35c6:	3b c0       	rjmp	.+118    	; 0x363e <Timer1_init+0x1a8>
	break;
	case Pre_64:OCR1A=(uint16)(F_CPU/64)*(Config_Ptr->compare_value);
    35c8:	aa e4       	ldi	r26, 0x4A	; 74
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	e9 81       	ldd	r30, Y+1	; 0x01
    35ce:	fa 81       	ldd	r31, Y+2	; 0x02
    35d0:	22 81       	ldd	r18, Z+2	; 0x02
    35d2:	33 81       	ldd	r19, Z+3	; 0x03
    35d4:	89 e0       	ldi	r24, 0x09	; 9
    35d6:	9d e3       	ldi	r25, 0x3D	; 61
    35d8:	fc 01       	movw	r30, r24
    35da:	2e 9f       	mul	r18, r30
    35dc:	c0 01       	movw	r24, r0
    35de:	2f 9f       	mul	r18, r31
    35e0:	90 0d       	add	r25, r0
    35e2:	3e 9f       	mul	r19, r30
    35e4:	90 0d       	add	r25, r0
    35e6:	11 24       	eor	r1, r1
    35e8:	11 96       	adiw	r26, 0x01	; 1
    35ea:	9c 93       	st	X, r25
    35ec:	8e 93       	st	-X, r24
    35ee:	27 c0       	rjmp	.+78     	; 0x363e <Timer1_init+0x1a8>
	break;
	case Pre_256:OCR1A=(uint16)(F_CPU/256)*(Config_Ptr->compare_value);
    35f0:	aa e4       	ldi	r26, 0x4A	; 74
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	e9 81       	ldd	r30, Y+1	; 0x01
    35f6:	fa 81       	ldd	r31, Y+2	; 0x02
    35f8:	22 81       	ldd	r18, Z+2	; 0x02
    35fa:	33 81       	ldd	r19, Z+3	; 0x03
    35fc:	82 e4       	ldi	r24, 0x42	; 66
    35fe:	9f e0       	ldi	r25, 0x0F	; 15
    3600:	ac 01       	movw	r20, r24
    3602:	24 9f       	mul	r18, r20
    3604:	c0 01       	movw	r24, r0
    3606:	25 9f       	mul	r18, r21
    3608:	90 0d       	add	r25, r0
    360a:	34 9f       	mul	r19, r20
    360c:	90 0d       	add	r25, r0
    360e:	11 24       	eor	r1, r1
    3610:	11 96       	adiw	r26, 0x01	; 1
    3612:	9c 93       	st	X, r25
    3614:	8e 93       	st	-X, r24
    3616:	13 c0       	rjmp	.+38     	; 0x363e <Timer1_init+0x1a8>
	break;
	case Pre_1024:OCR1A=(uint16)(F_CPU/1024)*(Config_Ptr->compare_value);
    3618:	aa e4       	ldi	r26, 0x4A	; 74
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	e9 81       	ldd	r30, Y+1	; 0x01
    361e:	fa 81       	ldd	r31, Y+2	; 0x02
    3620:	22 81       	ldd	r18, Z+2	; 0x02
    3622:	33 81       	ldd	r19, Z+3	; 0x03
    3624:	80 ed       	ldi	r24, 0xD0	; 208
    3626:	93 e0       	ldi	r25, 0x03	; 3
    3628:	fc 01       	movw	r30, r24
    362a:	2e 9f       	mul	r18, r30
    362c:	c0 01       	movw	r24, r0
    362e:	2f 9f       	mul	r18, r31
    3630:	90 0d       	add	r25, r0
    3632:	3e 9f       	mul	r19, r30
    3634:	90 0d       	add	r25, r0
    3636:	11 24       	eor	r1, r1
    3638:	11 96       	adiw	r26, 0x01	; 1
    363a:	9c 93       	st	X, r25
    363c:	8e 93       	st	-X, r24
	break;
	default: break;
	}

/*Enabling the interrupt flag for the OCF1A flag*/
	TIMSK=(1<<OCIE1A);
    363e:	e9 e5       	ldi	r30, 0x59	; 89
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 e1       	ldi	r24, 0x10	; 16
    3644:	80 83       	st	Z, r24

}
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	08 95       	ret

00003658 <Timer1_deInit>:
void Timer1_deInit(void){
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
/*Reseting the timer values*/
	TCCR1A = 0;
    3660:	ef e4       	ldi	r30, 0x4F	; 79
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	10 82       	st	Z, r1
	TCCR1B = 0;
    3666:	ee e4       	ldi	r30, 0x4E	; 78
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	10 82       	st	Z, r1
	TCNT1 = 0;
    366c:	ec e4       	ldi	r30, 0x4C	; 76
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	11 82       	std	Z+1, r1	; 0x01
    3672:	10 82       	st	Z, r1
	OCR1A = 0;
    3674:	ea e4       	ldi	r30, 0x4A	; 74
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	11 82       	std	Z+1, r1	; 0x01
    367a:	10 82       	st	Z, r1
/*Disabling the compare flag*/
	TIMSK&=~(1<<OCIE1A);
    367c:	a9 e5       	ldi	r26, 0x59	; 89
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	e9 e5       	ldi	r30, 0x59	; 89
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	8f 7e       	andi	r24, 0xEF	; 239
    3688:	8c 93       	st	X, r24
}
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	08 95       	ret

00003690 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	00 d0       	rcall	.+0      	; 0x3696 <Timer1_setCallBack+0x6>
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	9a 83       	std	Y+2, r25	; 0x02
    369c:	89 83       	std	Y+1, r24	; 0x01
/* Save the address of the Call back function in a global variable */
	g_callBackPtr=a_ptr;
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	9a 81       	ldd	r25, Y+2	; 0x02
    36a2:	90 93 ec 00 	sts	0x00EC, r25
    36a6:	80 93 eb 00 	sts	0x00EB, r24
}
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <UART_init+0x6>
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <UART_init+0x8>
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    36c4:	1a 82       	std	Y+2, r1	; 0x02
    36c6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    36c8:	eb e2       	ldi	r30, 0x2B	; 43
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    36d0:	ea e2       	ldi	r30, 0x2A	; 42
    36d2:	f0 e0       	ldi	r31, 0x00	; 0
    36d4:	88 e1       	ldi	r24, 0x18	; 24
    36d6:	80 83       	st	Z, r24
	UCSRB = SET_BIT(UCSRB,(Config_Ptr->bit_data&0b100)<<UCSZ2);
    36d8:	4a e2       	ldi	r20, 0x2A	; 42
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	aa e2       	ldi	r26, 0x2A	; 42
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	ea e2       	ldi	r30, 0x2A	; 42
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	68 2f       	mov	r22, r24
    36e8:	eb 81       	ldd	r30, Y+3	; 0x03
    36ea:	fc 81       	ldd	r31, Y+4	; 0x04
    36ec:	80 81       	ld	r24, Z
    36ee:	88 2f       	mov	r24, r24
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	9c 01       	movw	r18, r24
    36f4:	24 70       	andi	r18, 0x04	; 4
    36f6:	30 70       	andi	r19, 0x00	; 0
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <UART_init+0x4e>
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	2a 95       	dec	r18
    3704:	e2 f7       	brpl	.-8      	; 0x36fe <UART_init+0x4a>
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	86 2b       	or	r24, r22
    3710:	8c 93       	st	X, r24
    3712:	8c 91       	ld	r24, X
    3714:	fa 01       	movw	r30, r20
    3716:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3718:	e0 e4       	ldi	r30, 0x40	; 64
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 e8       	ldi	r24, 0x80	; 128
    371e:	80 83       	st	Z, r24
	UCSRC = SET_BIT(UCSRC,(Config_Ptr->bit_data&0b011)<<UCSZ0);
    3720:	40 e4       	ldi	r20, 0x40	; 64
    3722:	50 e0       	ldi	r21, 0x00	; 0
    3724:	a0 e4       	ldi	r26, 0x40	; 64
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	e0 e4       	ldi	r30, 0x40	; 64
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	68 2f       	mov	r22, r24
    3730:	eb 81       	ldd	r30, Y+3	; 0x03
    3732:	fc 81       	ldd	r31, Y+4	; 0x04
    3734:	80 81       	ld	r24, Z
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	9c 01       	movw	r18, r24
    373c:	23 70       	andi	r18, 0x03	; 3
    373e:	30 70       	andi	r19, 0x00	; 0
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	02 c0       	rjmp	.+4      	; 0x374a <UART_init+0x96>
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	2a 95       	dec	r18
    374c:	e2 f7       	brpl	.-8      	; 0x3746 <UART_init+0x92>
    374e:	88 0f       	add	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	86 2b       	or	r24, r22
    3754:	8c 93       	st	X, r24
    3756:	8c 91       	ld	r24, X
    3758:	fa 01       	movw	r30, r20
    375a:	80 83       	st	Z, r24
	UCSRC = SET_BIT(UCSRC,Config_Ptr->parity);
    375c:	40 e4       	ldi	r20, 0x40	; 64
    375e:	50 e0       	ldi	r21, 0x00	; 0
    3760:	a0 e4       	ldi	r26, 0x40	; 64
    3762:	b0 e0       	ldi	r27, 0x00	; 0
    3764:	e0 e4       	ldi	r30, 0x40	; 64
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	68 2f       	mov	r22, r24
    376c:	eb 81       	ldd	r30, Y+3	; 0x03
    376e:	fc 81       	ldd	r31, Y+4	; 0x04
    3770:	81 81       	ldd	r24, Z+1	; 0x01
    3772:	28 2f       	mov	r18, r24
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <UART_init+0xcc>
    377c:	88 0f       	add	r24, r24
    377e:	99 1f       	adc	r25, r25
    3780:	2a 95       	dec	r18
    3782:	e2 f7       	brpl	.-8      	; 0x377c <UART_init+0xc8>
    3784:	86 2b       	or	r24, r22
    3786:	8c 93       	st	X, r24
    3788:	8c 91       	ld	r24, X
    378a:	fa 01       	movw	r30, r20
    378c:	80 83       	st	Z, r24
	UCSRC = SET_BIT(UCSRC,Config_Ptr->stop_bit);
    378e:	40 e4       	ldi	r20, 0x40	; 64
    3790:	50 e0       	ldi	r21, 0x00	; 0
    3792:	a0 e4       	ldi	r26, 0x40	; 64
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	e0 e4       	ldi	r30, 0x40	; 64
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	68 2f       	mov	r22, r24
    379e:	eb 81       	ldd	r30, Y+3	; 0x03
    37a0:	fc 81       	ldd	r31, Y+4	; 0x04
    37a2:	82 81       	ldd	r24, Z+2	; 0x02
    37a4:	28 2f       	mov	r18, r24
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	02 c0       	rjmp	.+4      	; 0x37b2 <UART_init+0xfe>
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	2a 95       	dec	r18
    37b4:	e2 f7       	brpl	.-8      	; 0x37ae <UART_init+0xfa>
    37b6:	86 2b       	or	r24, r22
    37b8:	8c 93       	st	X, r24
    37ba:	8c 91       	ld	r24, X
    37bc:	fa 01       	movw	r30, r20
    37be:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    37c0:	eb 81       	ldd	r30, Y+3	; 0x03
    37c2:	fc 81       	ldd	r31, Y+4	; 0x04
    37c4:	83 81       	ldd	r24, Z+3	; 0x03
    37c6:	94 81       	ldd	r25, Z+4	; 0x04
    37c8:	cc 01       	movw	r24, r24
    37ca:	a0 e0       	ldi	r26, 0x00	; 0
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	aa 1f       	adc	r26, r26
    37d4:	bb 1f       	adc	r27, r27
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	aa 1f       	adc	r26, r26
    37dc:	bb 1f       	adc	r27, r27
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	aa 1f       	adc	r26, r26
    37e4:	bb 1f       	adc	r27, r27
    37e6:	9c 01       	movw	r18, r24
    37e8:	ad 01       	movw	r20, r26
    37ea:	80 e4       	ldi	r24, 0x40	; 64
    37ec:	92 e4       	ldi	r25, 0x42	; 66
    37ee:	af e0       	ldi	r26, 0x0F	; 15
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	bc 01       	movw	r22, r24
    37f4:	cd 01       	movw	r24, r26
    37f6:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    37fa:	da 01       	movw	r26, r20
    37fc:	c9 01       	movw	r24, r18
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3804:	e0 e4       	ldi	r30, 0x40	; 64
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	9a 81       	ldd	r25, Y+2	; 0x02
    380c:	89 2f       	mov	r24, r25
    380e:	99 27       	eor	r25, r25
    3810:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3812:	e9 e2       	ldi	r30, 0x29	; 41
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	80 83       	st	Z, r24
}
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3828:	df 93       	push	r29
    382a:	cf 93       	push	r28
    382c:	0f 92       	push	r0
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3834:	eb e2       	ldi	r30, 0x2B	; 43
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	80 81       	ld	r24, Z
    383a:	88 2f       	mov	r24, r24
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	80 72       	andi	r24, 0x20	; 32
    3840:	90 70       	andi	r25, 0x00	; 0
    3842:	00 97       	sbiw	r24, 0x00	; 0
    3844:	b9 f3       	breq	.-18     	; 0x3834 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3846:	ec e2       	ldi	r30, 0x2C	; 44
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    384e:	0f 90       	pop	r0
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	08 95       	ret

00003856 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    385e:	eb e2       	ldi	r30, 0x2B	; 43
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	80 81       	ld	r24, Z
    3864:	88 23       	and	r24, r24
    3866:	dc f7       	brge	.-10     	; 0x385e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3868:	ec e2       	ldi	r30, 0x2C	; 44
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	80 81       	ld	r24, Z
}
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	00 d0       	rcall	.+0      	; 0x387a <UART_sendString+0x6>
    387a:	0f 92       	push	r0
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	9b 83       	std	Y+3, r25	; 0x03
    3882:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3884:	19 82       	std	Y+1, r1	; 0x01
    3886:	0e c0       	rjmp	.+28     	; 0x38a4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	28 2f       	mov	r18, r24
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
    3890:	9b 81       	ldd	r25, Y+3	; 0x03
    3892:	fc 01       	movw	r30, r24
    3894:	e2 0f       	add	r30, r18
    3896:	f3 1f       	adc	r31, r19
    3898:	80 81       	ld	r24, Z
    389a:	0e 94 14 1c 	call	0x3828	; 0x3828 <UART_sendByte>
		i++;
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	8f 5f       	subi	r24, 0xFF	; 255
    38a2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	9b 81       	ldd	r25, Y+3	; 0x03
    38ae:	fc 01       	movw	r30, r24
    38b0:	e2 0f       	add	r30, r18
    38b2:	f3 1f       	adc	r31, r19
    38b4:	80 81       	ld	r24, Z
    38b6:	88 23       	and	r24, r24
    38b8:	39 f7       	brne	.-50     	; 0x3888 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    38c6:	0f 93       	push	r16
    38c8:	1f 93       	push	r17
    38ca:	df 93       	push	r29
    38cc:	cf 93       	push	r28
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <UART_receiveString+0xa>
    38d0:	0f 92       	push	r0
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	9b 83       	std	Y+3, r25	; 0x03
    38d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38da:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	28 2f       	mov	r18, r24
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	9b 81       	ldd	r25, Y+3	; 0x03
    38e6:	8c 01       	movw	r16, r24
    38e8:	02 0f       	add	r16, r18
    38ea:	13 1f       	adc	r17, r19
    38ec:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    38f0:	f8 01       	movw	r30, r16
    38f2:	80 83       	st	Z, r24
    38f4:	0f c0       	rjmp	.+30     	; 0x3914 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	8f 5f       	subi	r24, 0xFF	; 255
    38fa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	28 2f       	mov	r18, r24
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	9b 81       	ldd	r25, Y+3	; 0x03
    3906:	8c 01       	movw	r16, r24
    3908:	02 0f       	add	r16, r18
    390a:	13 1f       	adc	r17, r19
    390c:	0e 94 2b 1c 	call	0x3856	; 0x3856 <UART_recieveByte>
    3910:	f8 01       	movw	r30, r16
    3912:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	8a 81       	ldd	r24, Y+2	; 0x02
    391c:	9b 81       	ldd	r25, Y+3	; 0x03
    391e:	fc 01       	movw	r30, r24
    3920:	e2 0f       	add	r30, r18
    3922:	f3 1f       	adc	r31, r19
    3924:	80 81       	ld	r24, Z
    3926:	83 32       	cpi	r24, 0x23	; 35
    3928:	31 f7       	brne	.-52     	; 0x38f6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	28 2f       	mov	r18, r24
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	9b 81       	ldd	r25, Y+3	; 0x03
    3934:	fc 01       	movw	r30, r24
    3936:	e2 0f       	add	r30, r18
    3938:	f3 1f       	adc	r31, r19
    393a:	10 82       	st	Z, r1
}
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	08 95       	ret

0000394c <__mulsi3>:
    394c:	62 9f       	mul	r22, r18
    394e:	d0 01       	movw	r26, r0
    3950:	73 9f       	mul	r23, r19
    3952:	f0 01       	movw	r30, r0
    3954:	82 9f       	mul	r24, r18
    3956:	e0 0d       	add	r30, r0
    3958:	f1 1d       	adc	r31, r1
    395a:	64 9f       	mul	r22, r20
    395c:	e0 0d       	add	r30, r0
    395e:	f1 1d       	adc	r31, r1
    3960:	92 9f       	mul	r25, r18
    3962:	f0 0d       	add	r31, r0
    3964:	83 9f       	mul	r24, r19
    3966:	f0 0d       	add	r31, r0
    3968:	74 9f       	mul	r23, r20
    396a:	f0 0d       	add	r31, r0
    396c:	65 9f       	mul	r22, r21
    396e:	f0 0d       	add	r31, r0
    3970:	99 27       	eor	r25, r25
    3972:	72 9f       	mul	r23, r18
    3974:	b0 0d       	add	r27, r0
    3976:	e1 1d       	adc	r30, r1
    3978:	f9 1f       	adc	r31, r25
    397a:	63 9f       	mul	r22, r19
    397c:	b0 0d       	add	r27, r0
    397e:	e1 1d       	adc	r30, r1
    3980:	f9 1f       	adc	r31, r25
    3982:	bd 01       	movw	r22, r26
    3984:	cf 01       	movw	r24, r30
    3986:	11 24       	eor	r1, r1
    3988:	08 95       	ret

0000398a <__udivmodsi4>:
    398a:	a1 e2       	ldi	r26, 0x21	; 33
    398c:	1a 2e       	mov	r1, r26
    398e:	aa 1b       	sub	r26, r26
    3990:	bb 1b       	sub	r27, r27
    3992:	fd 01       	movw	r30, r26
    3994:	0d c0       	rjmp	.+26     	; 0x39b0 <__udivmodsi4_ep>

00003996 <__udivmodsi4_loop>:
    3996:	aa 1f       	adc	r26, r26
    3998:	bb 1f       	adc	r27, r27
    399a:	ee 1f       	adc	r30, r30
    399c:	ff 1f       	adc	r31, r31
    399e:	a2 17       	cp	r26, r18
    39a0:	b3 07       	cpc	r27, r19
    39a2:	e4 07       	cpc	r30, r20
    39a4:	f5 07       	cpc	r31, r21
    39a6:	20 f0       	brcs	.+8      	; 0x39b0 <__udivmodsi4_ep>
    39a8:	a2 1b       	sub	r26, r18
    39aa:	b3 0b       	sbc	r27, r19
    39ac:	e4 0b       	sbc	r30, r20
    39ae:	f5 0b       	sbc	r31, r21

000039b0 <__udivmodsi4_ep>:
    39b0:	66 1f       	adc	r22, r22
    39b2:	77 1f       	adc	r23, r23
    39b4:	88 1f       	adc	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	1a 94       	dec	r1
    39ba:	69 f7       	brne	.-38     	; 0x3996 <__udivmodsi4_loop>
    39bc:	60 95       	com	r22
    39be:	70 95       	com	r23
    39c0:	80 95       	com	r24
    39c2:	90 95       	com	r25
    39c4:	9b 01       	movw	r18, r22
    39c6:	ac 01       	movw	r20, r24
    39c8:	bd 01       	movw	r22, r26
    39ca:	cf 01       	movw	r24, r30
    39cc:	08 95       	ret

000039ce <__prologue_saves__>:
    39ce:	2f 92       	push	r2
    39d0:	3f 92       	push	r3
    39d2:	4f 92       	push	r4
    39d4:	5f 92       	push	r5
    39d6:	6f 92       	push	r6
    39d8:	7f 92       	push	r7
    39da:	8f 92       	push	r8
    39dc:	9f 92       	push	r9
    39de:	af 92       	push	r10
    39e0:	bf 92       	push	r11
    39e2:	cf 92       	push	r12
    39e4:	df 92       	push	r13
    39e6:	ef 92       	push	r14
    39e8:	ff 92       	push	r15
    39ea:	0f 93       	push	r16
    39ec:	1f 93       	push	r17
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	ca 1b       	sub	r28, r26
    39f8:	db 0b       	sbc	r29, r27
    39fa:	0f b6       	in	r0, 0x3f	; 63
    39fc:	f8 94       	cli
    39fe:	de bf       	out	0x3e, r29	; 62
    3a00:	0f be       	out	0x3f, r0	; 63
    3a02:	cd bf       	out	0x3d, r28	; 61
    3a04:	09 94       	ijmp

00003a06 <__epilogue_restores__>:
    3a06:	2a 88       	ldd	r2, Y+18	; 0x12
    3a08:	39 88       	ldd	r3, Y+17	; 0x11
    3a0a:	48 88       	ldd	r4, Y+16	; 0x10
    3a0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a10:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a12:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a14:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a16:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a18:	b9 84       	ldd	r11, Y+9	; 0x09
    3a1a:	c8 84       	ldd	r12, Y+8	; 0x08
    3a1c:	df 80       	ldd	r13, Y+7	; 0x07
    3a1e:	ee 80       	ldd	r14, Y+6	; 0x06
    3a20:	fd 80       	ldd	r15, Y+5	; 0x05
    3a22:	0c 81       	ldd	r16, Y+4	; 0x04
    3a24:	1b 81       	ldd	r17, Y+3	; 0x03
    3a26:	aa 81       	ldd	r26, Y+2	; 0x02
    3a28:	b9 81       	ldd	r27, Y+1	; 0x01
    3a2a:	ce 0f       	add	r28, r30
    3a2c:	d1 1d       	adc	r29, r1
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	ed 01       	movw	r28, r26
    3a3a:	08 95       	ret

00003a3c <itoa>:
    3a3c:	fb 01       	movw	r30, r22
    3a3e:	9f 01       	movw	r18, r30
    3a40:	e8 94       	clt
    3a42:	42 30       	cpi	r20, 0x02	; 2
    3a44:	c4 f0       	brlt	.+48     	; 0x3a76 <itoa+0x3a>
    3a46:	45 32       	cpi	r20, 0x25	; 37
    3a48:	b4 f4       	brge	.+44     	; 0x3a76 <itoa+0x3a>
    3a4a:	4a 30       	cpi	r20, 0x0A	; 10
    3a4c:	29 f4       	brne	.+10     	; 0x3a58 <itoa+0x1c>
    3a4e:	97 fb       	bst	r25, 7
    3a50:	1e f4       	brtc	.+6      	; 0x3a58 <itoa+0x1c>
    3a52:	90 95       	com	r25
    3a54:	81 95       	neg	r24
    3a56:	9f 4f       	sbci	r25, 0xFF	; 255
    3a58:	64 2f       	mov	r22, r20
    3a5a:	77 27       	eor	r23, r23
    3a5c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__udivmodhi4>
    3a60:	80 5d       	subi	r24, 0xD0	; 208
    3a62:	8a 33       	cpi	r24, 0x3A	; 58
    3a64:	0c f0       	brlt	.+2      	; 0x3a68 <itoa+0x2c>
    3a66:	89 5d       	subi	r24, 0xD9	; 217
    3a68:	81 93       	st	Z+, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	00 97       	sbiw	r24, 0x00	; 0
    3a6e:	a1 f7       	brne	.-24     	; 0x3a58 <itoa+0x1c>
    3a70:	16 f4       	brtc	.+4      	; 0x3a76 <itoa+0x3a>
    3a72:	5d e2       	ldi	r21, 0x2D	; 45
    3a74:	51 93       	st	Z+, r21
    3a76:	10 82       	st	Z, r1
    3a78:	c9 01       	movw	r24, r18
    3a7a:	0c 94 3f 1d 	jmp	0x3a7e	; 0x3a7e <strrev>

00003a7e <strrev>:
    3a7e:	dc 01       	movw	r26, r24
    3a80:	fc 01       	movw	r30, r24
    3a82:	67 2f       	mov	r22, r23
    3a84:	71 91       	ld	r23, Z+
    3a86:	77 23       	and	r23, r23
    3a88:	e1 f7       	brne	.-8      	; 0x3a82 <strrev+0x4>
    3a8a:	32 97       	sbiw	r30, 0x02	; 2
    3a8c:	04 c0       	rjmp	.+8      	; 0x3a96 <strrev+0x18>
    3a8e:	7c 91       	ld	r23, X
    3a90:	6d 93       	st	X+, r22
    3a92:	70 83       	st	Z, r23
    3a94:	62 91       	ld	r22, -Z
    3a96:	ae 17       	cp	r26, r30
    3a98:	bf 07       	cpc	r27, r31
    3a9a:	c8 f3       	brcs	.-14     	; 0x3a8e <strrev+0x10>
    3a9c:	08 95       	ret

00003a9e <__udivmodhi4>:
    3a9e:	aa 1b       	sub	r26, r26
    3aa0:	bb 1b       	sub	r27, r27
    3aa2:	51 e1       	ldi	r21, 0x11	; 17
    3aa4:	07 c0       	rjmp	.+14     	; 0x3ab4 <__udivmodhi4_ep>

00003aa6 <__udivmodhi4_loop>:
    3aa6:	aa 1f       	adc	r26, r26
    3aa8:	bb 1f       	adc	r27, r27
    3aaa:	a6 17       	cp	r26, r22
    3aac:	b7 07       	cpc	r27, r23
    3aae:	10 f0       	brcs	.+4      	; 0x3ab4 <__udivmodhi4_ep>
    3ab0:	a6 1b       	sub	r26, r22
    3ab2:	b7 0b       	sbc	r27, r23

00003ab4 <__udivmodhi4_ep>:
    3ab4:	88 1f       	adc	r24, r24
    3ab6:	99 1f       	adc	r25, r25
    3ab8:	5a 95       	dec	r21
    3aba:	a9 f7       	brne	.-22     	; 0x3aa6 <__udivmodhi4_loop>
    3abc:	80 95       	com	r24
    3abe:	90 95       	com	r25
    3ac0:	bc 01       	movw	r22, r24
    3ac2:	cd 01       	movw	r24, r26
    3ac4:	08 95       	ret

00003ac6 <_exit>:
    3ac6:	f8 94       	cli

00003ac8 <__stop_program>:
    3ac8:	ff cf       	rjmp	.-2      	; 0x3ac8 <__stop_program>
